{
	"Lessons": {
		"ce_este_html:html-start": {
			"Title": "HTML-Start",
			"Text": {
				"p1": "Bine ei venit la cursul nostru de web development. Aici vei invata cum sa creezi propriile tale pagini in internet.",
				"p2": "Toate paginile din lumea asta sunt contruite într - un limbaj numit HTML.Acest fisier este citit de către browser care apoi ii afisează conținutul.",
				"p3": "Primul lucru pe care trebuie sa il facem pentru a putea scrie in acest limbaj este sa anunțăm browserul că urmează sa citească un fișier HTML.Pentru a face asta trebuie doar sa scriem pe primul rând al fișierului <!DOCTYPE html> ,urmând ca apoi sa adăugăm conținutul paginii,ca in exemplul de mai jos.",
				"p4": "<div class='codeSnipped'>&#60!DOCTYPE html&#62<br>Textul de pe pagina </div>"
			},
			"HTML": "",
			"Hint":"Example Hint",
			"Validator":" CheckForDoctype(htmlDocData)",
			"Instructions": {
				"i1": "În editorul din drepata se află fișierul nostru test.html",
				"i2": "Adaugă în fișierul din dreapta textul <!DOCTYPE html> pentru a anunta browserul că urmeză să citească un fișier HTML",
				"i3": "Pe următorul rând adaugă textul pe care dorești să - l adaugi pe pagină",
				"i4": "Apasă pe butonul 'execută' pentru a vedea roadele muncii tale"
			},
			"Next Lesson":"ce_este_html:HTML-Primul tag"
		},
		"ce_este_html:HTML-Primul tag": {
			"Title": "HTML-Primul tag",
			"Text": {
				"p1": "Felicitări, tocmai ai văzut prima pagină pe care tu ai creat-o!",
				"p2": "HTML este o abreviere care vine de la <i>Hyper Text Markup Language.</i>",
				"p3": "Tag-urile in general au are urmatoarea structură: ",
				"p4": "<div class='codeSnipped'> &#60numele_tagului&#62    Conținutul tagului    &#60/numele_tagului&#62</div>",
				"p5": "Cele 3 elemente sunt: <ol> <li>&#60numele_tagului&#62-partea care deschide tagul</li> <li>Conținutul tagului</li> <li>&#60/numele_tagului&#62-partea care închide tagul</li></ol>",
				"p6": "Trebuie să închizi (aproape) toate taguruile pe care le deschizi. D<b>if</b>erența dintre un partea care deschide tagul și cea care închide tagul este simbolul “/” scris înainte de numele tag-ului. Pentru ca fișierul html să funcționeze corect este foarte important să închizi tagurile pe care le deschizi",
				"p7":"Un exemplu de tag este tag-ul &#60html&#62 &#60/html&#62, care cuprinde toate elementele din fișier și se adaugă după <!DOCTYPE html>. Prima parte , &#60html&#62, marchează locul în care se deschide tag-ul, iar a doua parte, &#60/html&#62, marchează locul în care se închide tag-ul. Intre acesta se scrie restul paginii. Mai jos un exemplu:",
				"p8":"<div class='codeSnipped'>   &#60!DOCTYPE html&#62 <br> &#60html&#62 <br> &#60/html&#62 </div>"
			},
			"HTML": "<!doctype html>",
			"Hint":"Example Hint",
			"Validator": " CheckForRootHtmlTag(htmlDocData)",
			"Instructions": {
				"i1": "In fișierul test.html adaugă pe primul rând <!DOCTYPE html> pentru a anunța broserul că urmează să citească un fișier html",
				"i2": "Pe al doilea rând deschide tagul html, care cuprinde toate celelalte elemente din pagină, cu ajutorul comenzii <html>",
				"i3": "Pe următoul rând scrie un text care să fie afișat pe pagină",
				"i4": "În final inchide tagul html cu ajutorul comenzii </html> și apoi vezi rezultatul apăsând butonul execută"
			},
			"Next Lesson":"ce_este_html:Scheletul unei pagini HTML"
		},
		"ce_este_html:Scheletul unei pagini HTML": {
			"Title": "Scheletul unei pagini HTML",
			"Text": {
				"p1": "Tocmai ai învățat un element important pentru structurarea corectă a unei pagini html, intregul ei conținut trebuie încadrat între tag-urile &#60html&#62&#60/html&#62",
				"p2": "Acum e timpul să facem următorul pas în construcția unei pagini web robuste și corect structurate. Orice pagină web are două componente importante, &#60head&#62&#60/head&#62 -cap- și &#60body&#62&#60/body&#62 -corp-, în ordinea asta",
				"p3": "&#60head&#62&#60/head&#62 Conține datele paginii (cum se numeste, de cine e facuta, pe ce limba e scris textul etc), în timp ce &#60body&#62&#60/body&#62 conține pagina în sine. Aceste tag-uri trebuiesc puse în interiorul tagurilor &#60html&#62&#60/html&#62, adică între ele.",
				"p4": "Încearcă să adaugi și tu aceste două tag-uri în ordinea asta pe pagina ta html."
			},
			"HTML": "<!doctype html>\n<html>\n</html>",
			"Hint":" Other Example Hint",
			"Validator":"CheckForHeadAndBody(htmlDocData)",
			"Instructions": {
				"i1": "În interiorul tag-ului <html></html> (adică între cele două părți), adaugă tag-urile pentru <head></head> și <body></body>"
			},
			"Next Lesson":"ce_este_html:Titulul paginii"
		},
		"ce_este_html:Titulul paginii": {
			"Title": "Titulul paginii",
			"Text": {
				"p1": "După ce ai adăugat &#62head&#62&#60/head&#62 și &#60body&#62&#60/body&#62 acum este momentul să afli la ce pot fi folosite. Să începem cu head. ",
				"p2": "Una din functiile tag-ului &#60head&#62&#60/head&#62 este acea de a da un titlu paginii tale. Acesta va apărea sus în browser, desupre barei in care scri pagina pe care dorești să intri. De exemplu titlul acestei pagini este “Academia de cod”. Pentru a da un titlu paginii tale adaugă tag-ul &#60title&#62&#60/title&#62 -titlu-.",
				"p3": "<b>Notă</b>: titlul paginii nu poate fi văzut pe pagină. El apare doar când distribui pagina pe anumite rețele (facebook, twitter, skype etc), când pagina este afișată de către un motor de căutare (google, bing etc) și în partea de sus a browser-ului cu care deschizi pagina.",
				"p4": "Mai jos ai un exemplu: ",
				"p5": "<div class='codeSnipped'> &#60head&#62<br> &#160 &#160 &#160 &#160 &#60title&#62Titlul paginii mele&#60/title&#62<br>&#60/head&#62</div> "
			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"Validator":"CheckTitle(htmlDocData)",
			"Instructions": {
				"i1": "Adaugă un titlu paginii tale folosind tag-ul <title></title>, care vine pus în head"
			},
			"Next Lesson":"ce_este_html:Structurarea unui document html"
		},
		"ce_este_html:Structurarea unui document html": {
			"Title": "Structurarea unui document html",
			"Text": {
				"p1": "Pagina ta html începe deja să prindă contur, dar și să crească din punct de vedere al rândurilor pe care le conține. Pentru a ne asigura că documentul rămâne bine structurat și ușor de citit folosim cea ce se numește indentare de cod.",
				"p2": "În documentele html asta înseamnă pur si simplu că dacă un tag se află în interiorul altui tag, acesta trebuie să se afle un pic mai la dreapta. Astfel se marchează și vizual faptul că un tag este în interiorul altuia. Mai jos un exemplu:",
				"p3": "<div class='codeSnipped'>    &#60!DOCTYPE html&#62<br>&#60html&#62<br> &#160 &#160 &#160 &#60head&#62<br>&#160 &#160 &#160 &#160 &#160 &#160 &#60title&#62Pagina demo &#60/title&#62<br>&#160 &#160 &#160 &#60/head&#62 <br><br>&#160 &#160 &#160 &#60body&#62<br><br>&#160 &#160 &#160 &#60/body&#62<br>&#60/html&#62</div>",
				"p4": "După cum poți vedea în exemplu, tag-urile &#60head&#62&#60/head&#62 și &#60body&#62&#60/body&#62 sunt în interiorul tagului &#60html&#62&#60/html&#62 și în consecință mai la dreapta decăt tagul &#60html&#62&#60/html&#62. ",
				"p5": "<b>Notă</b>: Indentarea textului este pur opțională din punct de vedere al funcționării codului. Ea este totuși foarte importantă deoarece face codul mult mai ușor de citit și întreținut, iar abilitatea de a crea cod ușor mentenabil și citeț este unul dintre principalele criterii de angajare al unei firme IT.  "
			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"Validator":"CheckIndentation(htmlDocData)",
			"Instructions": {
				"i1": "Indentează cele două tag-uri (head și body) ca în exemplul de mai sus."
			},
			"Next Lesson":"ce_este_html:Comentarii"
		},
		"ce_este_html:Comentarii": {
			"Title": "Comentarii",
			"Text": {
				"p1": "În lecția trecută am învățat cum să folosim indentarea apentru a ne asigura că pagina noastră html este citeață și ușor de întreținut. Acum urmează să învățăm cum să folosim comentariile, un alt element ce ne ușurează munca. ",
				"p2": "Comentariile sunt text pe care browserul (google chrome, opera, safari, edge etc.) îl ignoră. Le putem folosi pentru explica ce fac anumite părți din codul nostru. Ele nu vor apărea pe pagina noastra când utilizatorul o va deschide, ele sunt scrise doar pentru noi, ca să ne amintim ce face codul nostru când ne întoarcem să lucrăm la pagină.",
				"p3": "Un comentariu arată ca în exemplul de mai jos:",
				"p4": "<div class='codeSnipped'>&#60!-- Aici poți intoduce ce text dorești. Cei ce intră pe site-ul tău nu îl vor vedea. --&#62</div>",
				"p5": "După cum poți vedea în exemplu, comentariul începe după ce audaugi textul <!– și se sfârșește la –> . Între aceste două părți se adăugă textul pe care îl dorești. ",
				"p6":"În editor am adăugat noi niște comentarii pentru a-ți aminti ce ai învățat pană acum. "
			},
			"HTML": "<!-- Orice document html începe cu <!DOCTYPE html> -->\n<!DOCTYPE html>\n<!-- tag-ul html este primul care trebuie adăugat și cuprinde toate celelalte tag-uri-->\n<html>\n\t<!-- deoarece tag-urile head și body se află în interiorul tag-ului html ele vin așezate cu un tab mai spre interiorul paginii-->\n\t<head>\n\t\t<title>Comentarii</title>\n\t</head>\n\t<body>\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"Validator":"TestForComments(htmlDocData)",
			"Instructions": {
				"i1": "Adaugă încă un comentariu care să spună “primul meu comentariu”.",
				"i2":"Desupra titlului paginii adaugă un comentariu care să explice de ce ai ales respectivul titlu"
			},
			"Next Lesson":"ce_este_html:Paragrafe"
		},
		"ce_este_html:Paragrafe": {
			"Title": "Paragrafe",
			"Text": {
				"p1": "Acum că știm tot ce ne trebuie pentru a structura o pagină html robustă putem începe să adăugăm conținut pe ea.",
				"p2": "Până acum când am adăugat text pe pagină, l-am adăugat direct în tag-ul de html sau cel de body. Acum a sosit însă momentul să ne strucutrăm textul în paragrafe. Pentru a face asta trebuie să adăugăm tag-ul &#60 p&#62&#60/p&#62. În interiorul acestuia vom așeza textul paragrafului. Deoarece paragrafele trebuie să apară pe pagină ele vor fi puse în &#60body&#62&#60/body&#62. ",
				"p3": "Mai jos un exemplu::",
				"p4": "<div class='codeSnipped'>   &#60body&#62 <br> &#160 &#160 &#160 &#60p&#62Primul meu paragraf &#60/p&#62 <br> &#160 &#160 &#160 &#60p&#62Al doilea paragraf&#60/p&#62<br> &#60/body&#62 </div>",
				"p5": "Nu uita că deoarece paragrafele se află în interiorul tagului &#60body&#62&#60/body&#62 el terebuie pus și mai în interiorul paginii cu tab ",
				"p6":"În editor am adăugat noi niște comentarii pentru a-ți aminti ce ai învățat pană acum. "
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Paragrafe</title>\n\t</head>\n\t<body>\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"Validator":"TestForParagrafsInBody(htmlDocData)",
			"Instructions": {
				"i1": "Adaugă trei paragrafe în body . Ele pot conține ce text dorești tu."
			},
			"Next Lesson":"ce_este_html:Subtitluri"
		},
		"ce_este_html:Subtitluri": {
			"Title": "Subtitluri",
			"Text": {
				"p1": "Pagina ta începe să arate din ce în ce mai bine. În afară de paragrafe pe pagina ta pot apărea și subtitluri (a nu se confunda subtitlurile de pe pagina cu titlul paginii) cu ajutorul tag-ului &#60h1&#62&#60/h1&#62 (din engleză heading) . Textul scriu între aceste tag-uri va fi mai mare decăt cel din paragrafe și va apărea îngroșat.",
				"p2": "Mai jos poți vedea un exemplu de care folosește atât subtitluri cât și paragrafe ",
				"p3": "<div class='codeSnipped'>   &#60body&#62 <br> &#160 &#160 &#160 &#60h1&#62Academia de cod&#60/h1&#62 <br> &#160 &#160 &#160 &#60p&#62 Academia de cod este cea mai mare si mai completă resursă pentru a învăța programare în limba română &#60/p&#62<br> &#160 &#160 &#160 &#60p&#62Suntem singurul serviciu care oferă legătura directă cu angajatorii la finalul cursului&#60/p&#62<br> &#60/body&#62 </div>"
			},
			"HTML": "   <!DOCTYPE html>\n<html>\n\t<head>\n\n\t</head>\n\t<body>\n\n\t\t<p>Deja mă pot numi web developer.</p>\n\t\t<p>Deoarece deja știu să creez și să adaug conținut pe o pagină html funcțională</p>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"Validator":"TestLessonSubtitluri(htmlDocData)",
			"Instructions": {
				"i1": "În editor se află două paragrafe. Adaugă un subtitlu cu textul “Realizările mele” deasupra lor.",
				"i2":"Sub ele mai adaugă un subtitlu si două paragrafe. Pot conține ce text dorești."
			},
			"Next Lesson":"ce_este_html:Recapitulare"
		},
		"ce_este_html:Recapitulare": {
			"Title": "Recapitulare",
			"Text": {
				"p1": "Deja ai adunat o cantitate considerabilă de cunoștințe. Avem încredere în tine că esti pregătit să creezi un site întreg de unul singur.",
				"p2": "Nu-ți fie frică, suntem aici ca să te ajutăm. O scurtă recapitulare: ",
				"p3":"<ol><li>Orice fișier html trebuie să înceapă cu &#60!DOCTYPE html&#62</li> <li>După &#60!DOCTYPE html&#62 urmează tag-ul &#60html&#62&#60/html&#62</li> <li>În interiorul acestuia se află două tag-uri importante pentru structurate site-ului numite &#60head&#62&#60/head&#62 și &#60body&#62&#60/body&#62, neaparat în ordinea asta</li> <li>În head adăugăm informațiile legate de pagină (de exemplu titlu acesteia în interiorul tag-ului &#60title&#62 &#60/title&#62) În body adăugăm conținutul paginii, adică ceea ce se vede pe pagină (text, imagini etc). Textul de pe pagina poate fi încadrat în subtitluri(&#60h1&#62 &#60/h1&#62) și paragrafe (&#60p&#62&#60/p&#62)</li> <li>Nu uita de indentare și comentarii. Un comentariu arată așa:</li></ol>",
				"p4": "<div class='codeSnipped'>   &#60!-- Textul comentariului --&#62 </div>"
			},
			"HTML": "",
			"Hint":"Example Hint",
			"Validator":"TestLessonRecapitulare(htmlDocData)",
			"Instructions": {
				"i1": "Crează o pagină html de la zero. Adaugă doctype, html, head și body",
				"i2":"Aduga in head paginii titlul \"Lista mea de citit\"",
				"i3":"În body adaugă un subtitlu care să conțină numele unei cărți care-ți place si sub el minim un paragraf în care să descri cartea",
				"i4":"Repetă procesul și adaugă pe pagină în total trei cărți care te-au impresionat",
				"i5":"Adaugă un comentariu cu ce conținut dorești"
			},
			"Next Lesson":"html - link-uri imagini si liste:Introducere"
		},
		"html - link-uri imagini si liste:Introducere": {
			"Title": "Introducere in linkuri imagini si liste",
			"Text": {
				"p1": "Dacă ai ajuns aici înseamnă că sti deja elementele de bază ale dezvoltării de pagini online folosind titluri și paragrafe. În cadrul acestei lecții vei învăța să adaugi și alte elemente precum link-uri, imagini și liste pe pagina ta. ",
				"p2": "În editor ai o pagină web asemănătorare cu ceea ce ai creat tu până acum. Uită-te un pic peste ea pentru a-ți aminti cum trebuie să arate o pagină."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Pasul doi</title>\n\t</head>\n\t<body>\n\t\t<h1>Felicitări pentru realizările de până acum</h1>\n\t\t<p>Ai învățat deja să creezi pagini web și să adaugi conținut pe ele. Acum vei învăța să folosești și alte tag-uri</p>\n\t\t<p>Îți urăm succes</p>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"Validator":"Pass(htmlDocData)",
			"Instructions": {
				"i1": "Dacă ești pregătit apasă pe butonul execută pentru a merge mai departe"
			},
			"Next Lesson":"html - link-uri imagini si liste:link-uri"
		},
		"html - link-uri imagini si liste:link-uri": {
			"Title": "Link-uri",
			"Text": {
				"p1": "Dacă mai ți minte html vine de la <i>Hyper Text Markup Language</i>. Hyper Text este termenul tehnic pentru link, adică text care te duce pe altă pagină. Acum a venit momentul să înveți și tu să adaugi asemenea text pe pagina ta. ",
				"p2": "Pentru a aduăga link-uri pe pagina ta trebuie să folosești un tag numit &#60a&#62&#60/a&#62. De asemenea trebuie să specifici unde să ducă acel link. Mai jos găsești un exemplu:",
				"p3":"<div class='codeSnipped'> &#60a href=\"http://www.academiadecod.ro\"&#62Linkul către academia de cod&#60/a&#62</div>",
				"p4":"Nu te speria dacă îți pare că structura acestui tag este prea complexă, o vom explica pas cu pas și element cu element. <a></a> este tag-ul care marchează ca în el se află un link.",						"p5":"<i>href</i> este un atribut al tag-ului care indică paginii unde tebuie să ducă acel link. href este o prescurtare care vine de la Hyper Text Reference, adică referința hypertextului. În limbaj simplu href este pagina pe care trebuie să o deschidă link-ul.",
				"p6":"Pentru a spune link-ului unde trebuie să ducă pagina se scrie href=“numele paginii”. Este foarte importantă folosirea semnului egal si a ghilimelelor. De asemenea numele paginii trebuie să înceapă cu “http://” ",
				"p7":"Intre tagul &#60a&#62&#60/a&#62 se adaugă textul pe care utilizatorul să apese ca să deschidă linkul. Sună mult mai bine ca pe pagină să scrie “Dacă doriti mai multe detalii faceți click aici” decât dacă apare pur și simplu numele paginii. Acesta este rolul textului din interiorul tag-ului &#60a&#62&#60/a&#62 ",
				"p8":"Mai uită-te acum o dată la exemplu și vei vedea că acum reușești să înțelegi ce face și cum funcționează"
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t</head>\n\t<body>\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"Validator":"TestLessonLinkuri(htmlDocData)",
			"Instructions": {
				"i1": "Adaugă paginii ce titlu dorești. Nu uita că titlul se trece în head cu ajutorul tag-ului <title></title>",
				"i2":"Adaugă un link către pagina ta preferată (https://academiadecod.ro). Textul pe care să faci click trebuie să fie pagina mea preferată. Nu uita că din moment ce link-ul este un element ce ține de conținutul paginii el trebuie adăugat în body.",
				"i3":"Te incurajam sa faci click pe link-ul tau sa vezi daca functionează"
				},
			"Next Lesson":"html - link-uri imagini si liste:Liste"
		},
		"html - link-uri imagini si liste:Liste": {
			"Title": "Liste",
			"Text": {
				"p1": "Acum că ai învățat să folosești link-uri ești pregătit să înfrunți următorul obstacol, listele. N-ai frică, nu sunt foarte grele și suntem aici ca să te ajutăm. ",
				"p2": "Ca să putem vorbi însă de liste, trebuie să vorbim mai întâi de nesting. Nesting-ul (tradus încorporare) este procesul prin care un tag html este încorporat/integrat/ băgat în alt tag html. Ai făcut asta deja cu tagul &#60title&#62&#60/title&#62 încorporat în tag-ul de head și tag-urile &#60h1&#62&#60/h1&#62 și &#60p&#62&#60/p&#62 încorporate în tag-ul de body. Nu uita de indentare la nesting. Fiecare tag care se află în interiorul altui tag trebuie să fie mai la dreapta decât tagul inițial. De asemenea să nu uiți că indentarea se face cu tasta tab, nu cu tasta spațiu. ",
				"p3":"Dar gata cu recapitualrea, e timpul să învățăm ceva nou. Listele sunt conținute între taguri &#60ol&#62&#60/ol&#62 (ordered list, adică listă ordonata. Vom vorbi în lecția următoare si despre liste neordonate). În interiorul acestui tag, fiecare element trebuie încadrat într-ul tag &#60li&#62&#60/li&#62, care delimitează un element/un item al listei.",
				"p4":"Mai jos ai un exemplu de lsită ordonată: ",
				"p5":"<div class='codeSnipped'>&#60ol&#62<br> &#160 &#160 &#160 &#60li&#62Bill Gates&#60/li&#62<br> &#160 &#160 &#160 &#60li&#62Carlos Slim Helu&#60/li&#62<br> &#160 &#160 &#160 &#60li&#62Warren Buffett&#60/li&#62<br> &#160 &#160 &#160 &#60li&#62Amancio Ortega&#60/li&#62<br> &#160 &#160 &#160 &#60li&#62Larry Ellison&#60/li&#62<br>&#60/ol&#62</div>",
				"p6":"După cum poți vedea tag-ul &#60ol&#62&#60/ol&#62 cuprinde întreaga listă, iar câte un tag &#60li&#62&#60/li&#62 înconjoară fiecare element în parte.",
				"p7":"Este foarte important ca elementele încadrate cu &#60li&#62&#60/li&#62 să fie încorporate/ băgate într-un tag de list, de exemplu &#60ol&#62&#60/ol&#62 în cazul listelor ordonate. De asemenea este important ca elementele cu &#60li&#62&#60/li&#62 să fie indentate față de tag-ul &#60ol&#62&#60/ol&#62 pentru a păstra codul citeț și ușor de întreținut"
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t</head>\n\t<body>\n\t\t<h1>Orașele mele preferate</h1>\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"Validator":"TestLessonListe(htmlDocData)",
			"Instructions": {
				"i1": "Sub tag-ul <h1></h1> folosește tag-ul <ol></ol> pentru a crea o listă ordonată",
				"i2":"Folosește tag-ul <li></li> pentru a trece în listă minim 3 dintre orașele tale preferate în ordine",
				"i3":"Nu uita ca toate elementele <li></li> trebuiesc scriese în interiorul elementului <ol></ol> și indentate față de acesta",
				"i4":"Nu uita să închizi toate tag-urile pe care le deschizi"
			},
			"Next Lesson":"html - link-uri imagini si liste:Liste partea a doua"
		},
		"html - link-uri imagini si liste:Liste partea a doua": {
			"Title": "Liste partea a doua",
			"Text": {
				"p1": "Felicitări pentru că ai reușit să creezi o listă ordonata. Metoda prin care poți crea o listă neordonată este aproape identică. Tot ce ai de făcut este să înlocuiești tag-ul &#60ol&#62&#60/ol&#62 cu tagul &#60ul&#62&#60/ul&#62 (unordered list, listă neordonată).",
				"p2": "În interiorul listei neordonate fiecare element trebuie încadrat într-ul element &#60li&#62&#60/li&#62, exact ca în cazul unei liste ordonate. Exact ca și în cazul unei liste ordonate, tag-urile &#60li&#62&#60/li&#62 trebuiesc indentate față de tag-ul &#60ul&#62&#60/ul&#62 și nu au voie să se afle în afara acestuia. ",
				"p3":"Dar gata cu recapitualrea, e timpul să învățăm ceva nou. Listele sunt conținute între taguri &#60ol&#62&#60/ol&#62 (ordered list, adică listă ordonata. Vom vorbi în lecția următoare si despre liste neordonate). În interiorul acestui tag, fiecare element trebuie încadrat într-ul tag &#60li&#62&#60/li&#62, care delimitează un element/un item al listei.",
				"p4":"Mai jos ai un exemplu de lsită neordonată: ",
				"p5":"<div class='codeSnipped'>&#60ul&#62<br> &#160 &#160 &#160 &#60li&#62Flori&#60/li&#62<br> &#160 &#160 &#160 &#60li&#62Ciocolată&#60/li&#62<br> &#160 &#160 &#160 &#60li&#62Vin&#60/li&#62<br>&#60/ul&#62</div>",
				"p6":"După cum poți vedea tag-ul &#60ol&#62&#60/ol&#62 cuprinde întreaga listă, iar câte un tag &#60li&#62&#60/li&#62 înconjoară fiecare element în parte.",
				"p7":"Este foarte important ca elementele încadrate cu &#60li&#62&#60/li&#62 să fie încorporate/ băgate într-un tag de list, de exemplu &#60ol&#62&#60/ol&#62 în cazul listelor ordonate. De asemenea este important ca elementele cu &#60li&#62&#60/li&#62 să fie indentate față de tag-ul &#60ol&#62&#60/ol&#62 pentru a păstra codul citeț și ușor de întreținut"
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t</head>\n\t<body>\n\t\t<h1>Oameni care m-au impresionat</h1>\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"Validator":"TestLessonListeDoi(htmlDocData)",
			"Instructions": {
				"i1": "Repetă exercițiul anterior pentru a te familiariza și cu listele neordonate",
				"i2":"Sub tag-ul <h1></h1> crează cu ajutorul tag-ului <ul></ul> o listă neordonată",
				"i3":"Cu ajutorul tag-ului <li></li> adaugă în lista aceasta minim trei persoane care te-au impresionat. De data aceasta ordinea nu contează"
			},
			"Next Lesson":"html - link-uri imagini si liste:Liste și linkuri"
		},
		"html - link-uri imagini si liste:Liste și linkuri": {
			"Title": "Liste și linkuri",
			"Text": {
				"p1": "Și iată că iarăși ai ajuns să acumulezi o cantitate considerabilă de cunoștințe. Este timpul să recapitulăm link-uri și liste pentru a solidifica cea ce am învățat împreună. ",
				"p2":"<div class='codeSnipped'> &#60!-- Link --&#62<br>&#60a href=\"http://www.academiadecod.ro\"&#62Linkul către academia de cod&#60/a&#62<br><br>  &#60!-- Listă --&#62<br>&#60ul&#62<br>&#160 &#160 &#160  &#60li&#62Flori&#60/li&#62 <br>&#160 &#160 &#160 &#60li&#62Ciocolată&#60/li&#62 <br>&#160 &#160 &#160&#60li&#62Vin&#60/li&#62 <br>&#60/ul&#62<br><br>&#60!-- Și astea sunt comentarii, dacă ai uitat--&#62</div>",
				"p3":"Acum că ți-ai amintit cum funcționează aceste două elemente e momentul să le combinăm pentru a crea ceva nou. În cadrul unei liste poți adăuga si link-uri, introducând în interiorul elementului &#60li&#62&#60/li&#62 (foarte important în interiorul elemntului &#60li&#62&#60/li&#62 nu în afara lui) poți adăuga un element &#60a&#62&#60/a&#62 ce să conțină ce link dorești. În editor ai un exemplu.",
				"p4":"Notă: Deoarece spre deosebire de elementele &#60li&#62&#60/li&#62 și &#60p&#62&#60/p&#62 elementul &#60a&#62&#60/a&#62 nu așează conținutul său pe un rănd nou, el poate fi scris în html pe acelaș rând cu elementul în care este încorporat/băgat, ca în exemplul din editor, fără a face fișierul mai puțin citeț sau mai puțin mentenabil"
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li><a href=\"http://www.academiadecod.ro\">Academia de cod</a></li>\n\t\t</ul>\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"Validator":"TestLessonListeSiLinkuri(htmlDocData)",
			"Instructions": {
				"i1": "Completează lista de site-uri cu încă alte două pagini",
				"i2":"Nu uita că elementul <a></a> trebuie să se afle în interiorul elementelor <li></li>, iar acestea trebuie să se afle în interiorul elementului <ul></ul>"
			},
			"Next Lesson":"html - link-uri imagini si liste:Imagini"
		},
		"html - link-uri imagini si liste:Imagini": {
			"Title": "Imagini",
			"Text": {
				"p1": "Acum că ne-am perfecționat cunoștințele în domeniul listelor și al link-urilor e momentul să trecem la următorul element html cu strucutră ceva mai complexă și anume imaginile. Ele pot fi adăugate cu ajutoul tag-ului &#60img&#62",
				"p2":"La fel ca și în cazul link-urilor, vom începe cu un exemplu, pe care îl vom explica apoi pas cu pas și element cu element. Aici este exemplul: ",
				"p3":"<div class='codeSnipped'>&#60img src=\"https://denniskilleen.files.wordpress.com/2014/11/talk-with-code-by-pcbots.png\" /&#62 <div>",
				"p4":"Primul aspect ce trebuie remarcat la tagul de imagine este că el nu vine la fel ca și majoritatea celorlalte tag-urilor în perechi de forma &#60p&#62&#60/p&#62, &#60h1&#62&#60/h1&#62 sau &#60a&#62&#60/a&#62, ci face parte din categoria foarte restrânsă a tag-urilor care se închid singure, fapt marcat prin simbolul “/>” aflat la sfârșitul tag-ului. Motivul din care tag-ul se închide singur este pentru că în interiorul unei imagini, spre deosebire de interiorul unui paragraf sau al unei liste nu se poate pune alt element sau text",
				"p5":"Următorul aspect ce trebuie remarcat la acest tag este faptul că în acest tag, la fel ca și în tag-ul &#60a&#62&#60/a&#62 trebuie adăugat un atribut care să indice fișierului ce imagine să afișeze. Acest atribut se numește src (source, adică sursă) și indică fișierului de unde provine imaginea pe care trebuie să o afișeze. Din nou ca și la href este foarte importantă folosirea ghilimelelor și a semnului egal.",
				"p6":"Acum că ai înțeles exemplul, e timpul să adaugi și tu o imagine pe pagina ta. Pentru a obține atributul src al unei imagini de pe internet fă click dreapta pe imagine și apasă pe opțiunea “Copy image address” sau în română “Copiază adresa imaginii”. Apoi fă click dreapta și apasă pe opțiunea paste/lipește."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t</head>\n\t<body>\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"Validator":"TestLessonImagini(htmlDocData)",
			"Instructions": {
				"i1": "Adaugă o imagine pe pagina ta",
				"i2":"Dacă nu dorești să cauți tu o imagine poți folosi această adresă:"
			},
			"Next Lesson":"html - link-uri imagini si liste:Imagini si link-uri"
		},
		"html - link-uri imagini si liste:Imagini si link-uri": {
			"Title": "Imagini si link-uri",
			"Text": {
				"p1": "Impresionant, deja cunoști o duzină de tag-uri html. Hai să ne oprim un pic și să vedem din nou cum putem să le combinăm. ",
				"p2":"Poate că ai remarcat faptul ca pe foarte multe pagini poți face click pe imagini care să te ducă pe altă pagină. De exemplu dacă apeși pe logo-ul nostru din stânga sus te duce pe pagina noastră de pornire. Acum vei afla și tu cum poți să faci asta.",
				"p3":"Elementul care ne duce pe altă pagină când facem click pe el este tag-ul de link, adica &#60a&#62&#60/a&#62, pe care l-am mai folosit. Doar că de data aceasta nu dorim ca utilizatorul să apese pe un text ci pe o imagine pentru a ajunge pe altă pagină. De acea conținutul tag-ului &#60a&#62&#60/a&#62 nu va mai fi un text ci o imagine, adăugată pe site cu ajurorul tag-ului &#60img /&#62",
				"p4":"<div class='codeSnipped'>  &#60a href=\"https://academiadecod.ro\" &#62 <br>&#160 &#160  &#160 &#60img src=\"https://denniskilleen.files.wordpress.com/2014/11/talk-with-code-by-pcbots.png\"/&#62 <br>&#60/a&#62  <div>",
				"p5":"După cum poți vedea tag-ul &#60img /&#62 este așezat în interiorul tag-ului &#60a&#62&#60/a&#62. Când browserul vede o asemenea structură el înțelege că trebuie să afișeze pe ecran o poză și că trebuie să ducă utilizatorul pe o altă pagină când acesta face click pe respectiva poză. De asemenea browserul știe ce imagine să folosească și pe ce pagină să redirecționeze utilizatorul datorită atributelor src și respectiv href."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t</head>\n\t<body>\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"Validator":"TestLessonImaginiSiLinkuri(htmlDocData)",
			"Instructions": {
				"i1": "Adaugă și tu o poză care să ducă către o altă pagină."
			},
			"Next Lesson":"HTML - Recapitulare:Introducere"
		},
		"HTML - Recapitulare:Introducere": {
			"Title": "Html Recapitulare",
			"Text": {
				"p1": "Deja ai acumulat suficente cunoștiințe ca să-ți creezi propria pagină și chiar asta vom face pe parcursul acestei lecți. Și, tot în cadrul lecției ăsteia vei învăța și cum să creezi un fișier html pe calculatorul tău și cum să-l vezi deschis în browser. Dacă îți trebuie un moment de respiro ca să si timp apreciezi cea ce-ai învățat, acum e momentul. ",
				"p2":"După ce terminăm pagina asta, vom învăța cum să aranjăm pagina din puct de vedere estetic folosind un limbaj numit CSS. Dar înapoi la problemele noastre actuale."
			},
			"HTML": "",
			"Hint":"Example Hint",
			"Validator":"Pass(htmlDocData)",
			"Instructions": {
				"i1": "Dacă te simți pregătit, apasă pe butonul execută pentru a merge mai departe"
			},
			"Next Lesson":"HTML - Recapitulare:Scheletul paginii"
		},
		"HTML - Recapitulare:Scheletul paginii": {
			"Title": "Scheletul paginii",
			"Text": {
				"p1": "A sosit momentul sunteți doar tu, fișierul html și eu, umila voce ce te ghidează în încercarea ta de a crea ceva incredibil.",
				"p2":"Să începem cu începutul. Orice pagină are nevoie de un schelet stabil. În cazul paginilor html acest schelet este alcătuit din 4 elemente ce nu au voie să lipsească, altfel pot apărea errori și probleme. Aceste 4 elemente sunt:<ol><li>&#60!Doctype html&#62</li><li>&#60html&#62&#60/html&#62</li><li>&#60head&#62&#60/head&#62</li><li>&#60body&#62&#60/body&#62</li></ol>",
				"p3":"Hai să începem să lucrăm la prima ta pagină creată din nimic."
			},
			"HTML": "",
			"Hint":"Example Hint",
			"Validator":"CheckForHeadAndBody(htmlDocData)",
			"Instructions": {
				"i1": "Adauga elementele html ce constitue scheletul oricrei pagini html. Avem incredere in tine ca sti care cum vin scrise"
			},
			"Next Lesson":"HTML - Recapitulare:Titlul paginii"
		},
		"HTML - Recapitulare:Titlul paginii": {
			"Title": "Titlul paginii",
			"Text": {
				"p1": "Pagina pe care o vom construi împreună va fi o pagină dedicată în întregime ție. Primul lucru pe care trebuie să-l afle cei ce intră pe pagina ta este cum se numeste pagina. Pentru a face asta trebuie să dăm paginii un titlu și să scriem sus mare despre ce este pagina.",
				"p2":"Pentru a face asta ne vom folosi de două tag-uri pe care le-am învățat deja &#60title&#62&#60/title&#62 și &#60h1&#62&#60/h1&#62. Tag-ul &#60title&#62&#60/title&#62 vine pus în head iar textul din interiorul său apare în bara de sus a browserului. Tag-ul &#60h1&#62&#60/h1&#62 vine pus în body deoarece conținutul său apare pe pagina propriu-zisă. "
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\n\t</head>\n\t<body>\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"Validator":"CheckLessonRecapTitulPaginii(htmlDocData)",
			"Instructions": {
				"i1": "Dă un titlu pagini. Poți da paginii ce titlu dorești, dar deoarece construim o pagină despre tine recomandăm ca titlul să fie numele tău",
				"i2":"Adaugă un tag <h1></h1>(titlu de paragraf) pe pagina ta. Din nou, poți scrie ce vrei, dar recomandăm textul “Bine ai venit pe pagina lui”+numele tău."
			},
			"Next Lesson":"HTML - Recapitulare:6 tipuri de H"
		},
		"HTML - Recapitulare:6 tipuri de H": {
			"Title": "6 tipuri de H",
			"Text": {
				"p1": "Probabil ai te-ai întrebat deja ce reprezintă cifra 1 din numele tag-ului de titlu de paragraf, &#60h1&#62&#60/h1&#62. Ei bine, tag-ul &#60h1&#62&#60/h1&#62 nu este singurul tag pentru subtitluri. Poți alege din 6 tipuri diferite de subtitluri, h1, h2, h3, h4, h5, h6.",
				"p2":"Ca regulă de bază, cu cât numărul din tag este mai mare, cu atât titlul va apărea mai mic pe pagină. De exemplu textul cuprins în tag-ul &#60h3&#62&#60/h3&#62 este mai mare decât cel cuprins în tag-ul &#60h5&#62&#60/h5&#62. Așadar &#60h1&#62&#60/h1&#62 marchează textul cel mai mare, iar &#60h6&#62&#60/h6&#62 textul cel mai mic, aproape egal cu cel din tag-ul &#60p&#62&#60/p&#62",
				"p3":"Folosește și tu aceste noi tag-uri pentru titlu de paragraf pentru a adăuga niște conținut pe pagina ta. "
			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"Validator":"CheckLessonRecapSubtitluri(htmlDocData)",
			"Instructions": {
				"i1": "Sub tag-ul <h1></h1> pe care l-ai scris deja lecția trecută, adaugă un alt tag de subtitlu <h3></h3> și adaugă în el textul “Ce îmi dresc să realizez după ce termin cursurile de pe academia de cod”",
				"i2":"Sub acest tag adaugă minim un paragraf care să descri ce îți drești să realizezi după ce termini cursurile de pe academia de cod. Poți folosi câte paragrafe ai nevoie, dar trebuie să adaugi minim unul.",
				"i3":"Adaugă încă un subtitlu <h5></h5> cu textul “Sunt mândru că până acum…” și adaugă și sub acesta minim un paragraf."
			},
			"Next Lesson":"HTML - Recapitulare:Link-uri și imagini"
		},
		"HTML - Recapitulare:Link-uri și imagini": {
			"Title": "Link-uri și imagini",
			"Text": {
				"p1":"Hai să ne întoarcem un pic la link-uri și imagini. Mai jos ai un exemplu de link și unul de imagine, ca să poți să-și amintești de structura lor:",
				"p2":"<div class='codeSnipped'>&#60!--Link --&#62<br>&#60a href=\"http://academiadecod.ro\"  target=\"_blank\"&#62 Click aici&#60/a&#62<br><br>&#60!--Imagine--&#62<br>&#60img src=\"http://academiadecod.ro/Images/Logo.jpg\"  alt=\"Logo\"/&#62</div>",
				"p3":"Poate ai remarcat că în interiorul tag-urilor am mai adăugat câte un atribut nou, target în cazul link-ului și alt în cazul imaginii. Să le luăm pe rând.",
				"p4":"Să începem cu target-țintă-. Acest atriut indică browser-ului unde să dechidă link-ul respectiv. Deși target poate căpăta diverse valori, pe noi ne interesează pentru moment doar două, “_blank”-gol- și “_self”-sine- (celelalte valori sunt utile doar în cazul folosirii unui element html numit iframe, pe care nu-l vom învăța decât mult mai târziu). Remarcă faptul că numele valorilor atributelor acestora începe cu simbolul “_” și trebuie încadrat între ghilimele.",
				"p5":"Valoarea “_self”, a atributului target indică browser-ului că trebuie să deschidă pagina în aceași fereastră în care se flă și link-ul. În cazul nostru asta înseamnă că-l deschide <b>în locul</b> paginii pe care se află link-ul. Pe românește asta înseamnă că deschide pagina la care duce link-ul în locul paginii noastre.",
				"p6":"Valoarea “_blank” a atributului target indică browserului că trebuie să deschidă pagina la cre duce link-ul într-o fereastră nouă. În cazul nostru asta înseamnă că browser-ul deschide pagina la care duce link-ul într-un tab nou, <b>fără să închidă pagina noastră</b> această tehnică poate fi foarte utilă pentru a nu pierde utilizatorii de pe pagina noastră când acestea deschid u link către o altă pagină.",
				"p7":"Poți folosi atributul target cum consideri de cuviință. Noi recomandăm să folosești tagret=“_blank” dacă creezi un link spre un alt domeniu (de ex. de pe academiadecod.ro către codecademy.com) și tagret=“_self” în cazul în care link-ul duce către o altă pagină pe același domeniu (de ex de pe academiadecod.ro către academiadecod.ro/cursul_de_java).",
				"p8":"Ok, acum că am înțeles rolul atributul target e timpul să ne uităm la atributul alt-alternativ-. Acesta specifică un text alternativ care să fie afișat pe pagină în cazul în care din diverse motive (conecțiune proastă, link schimbat, probleme cu serverul) imaginea nu poate fi încărcată pe pagină. Poate ai mai văzut pe internet că în anumite locuri în locul în locul unei imagini apare o iconiță și un text ca în exemplul de mai jos. Acel text este chiar textul pe care tu-l specifici în html cu ajutorul atributului alt.",
				"p9":"<img src='https://dokuwiki.webawake.ro/lib/exe/fetch.php?tok=b692be&media=http%3A%2F%2Fcdn3.wpbeginner.com%2Fwp-content%2Fuploads%2F2014%2F10%2Fbroken-img-alt-text.jpg'/>",
				"p10":"Hai să adăugăm o imagine și un link pe pagina ta."
			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"Validator":"CheckLessonRecapLinkuriSiImagini(htmlDocData)",
			"Instructions": {
				"i1": "Adaugă o imagine care-ți place pe pagina ta. În atributul alt al imaginii specifică ce text să fie afișat pe pagină dacă pagina nu poate fi încărcată pe pagină",
				"i2":"Adaugă textul “Melodia mea preferată este asta” pe pagina ta, și transformă cuvântul asta într-un link care să ducă spre melodia ta preferată. Fă în așa fel încât acel link să deschidă melodia într-un tab nou.Nu uita să încadrezi restul textului (partea care nu e link) într-un paragraf"
			},
			"Next Lesson":"HTML - Recapitulare:Seturi de caractere"
		},
		"HTML - Recapitulare:Seturi de caractere": {
			"Title": "Seturi de caractere",
			"Text": {
				"p1":"Încă un exercițiu și vei învăța cum să creezi fișiere html nu doar în editorul nostru ci și pe calculatorul tău. Mai întâi trebuie să vorbim însă despre un subiect foarte important și anume encodarea.",
				"p2":"În setul standard de caractere html acele simboluri pur și simplu nu există, motiv din care html-ul le înlocuiește cu alte caractere pe care le cunoaște. Din acelaș motiv unele documente word sau txt sunt și ele pline de caractere fără sens în locul semnelor speciale.",
				"p3":"Pentru a ne asigura că html-ul fososește setul de caractere dorit de noi, trebuie mai întâi să specificăm html-ului ce set de caractere să folosească. Pentru a face asta vom folosi tag-ul &#60meta/&#62(meta = înainte de/ primar). Acest tag se folosește pentru a da browser-ului informații de care are nevoie înainte de a citi conținutul fișierului html. Deși tag-ul meta are o multitudine de întrebuințări, noi îl vom folosi pentru moment doar ca să spunem html-ului ce set de caractere să folosească.",
				"p4":"Ce set de caractere trebuie să folosească browser-ul este unul din primele lucruri pe care ar trebui să le știe, pentru a preveni probleme ulterioare. De asemenea, deoarece tag-ul meta indică informații despre pagină și nu conținut al paginii el vine așezat în &#60head&#62&#60/head&#62. Cel mai sigur e să fie primul tag din head.",
				"p5":"Tag-ului &#60meta/&#62(care se închide singur exact ca și tag-ul &#60img/&#62), trebuie să-i atașăm și un atribut, și anume “charset” -set de caractere-, care indică setul de caractere pe care îl va folosi pagina. Setul de caractere care e suportat de cel mai mare număr de brosere și sisteme de operare și care include toate caracterele speciale din toate limbile este “utf-8”. Există și alte set-uri de caractere, dar nu avem acum timp să le enumerăm pe toate (și oricum probabil le-ai uita rapid).",
				"p6":"Mai jos poți vedea cum trebuie să arate tag-ul meta:",
				"p7":"<div class='codeSnipped'>&#60meta charset=\"utf-8\"/&#62</div>"
			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"Validator":"CheckLessonRecapCharSet(htmlDocData)",
			"Instructions": {
				"i1":"Adaugă tag-ul de meta în head (înainte de title) și schimbă setul de caractere in utf-8."
			},
			"Next Lesson":"HTML - Recapitulare:Totul la tine pe calculator"
		},
		"HTML - Recapitulare:Totul la tine pe calculator": {
			"Title": "Totul la tine pe calculator",
			"Text": {
				"p1":"Felicitări, după ce te-ai luptat atâta timp cu html-ul în sfârșit ai terminat cu el (pentru o perioadă). Oprește-te o clipă și gândește-te la tot ce ai învățat până acum. Am pornit împreună de la nimic și acum ști să-ți creezi pagina și să o umpli de texte, imagini, tabele list și link-uri.",
				"p2":"În următorul set de lecții vei învăța cum să-ți aranjezi pagina din punct de vedere estetic. Pentru asta vei folosi un limbaj numit CSS, dar înainte de asta mai trebuie să înveți o lecție foarte importantă, și anume cum să creezi o pagină web pe calculatorul tău.",
				"p3":"Primul lucru de care ai nevoie este un editor text. Recomandăm <a href='https://www.sublimetext.com'>Sublime text</a> sau <a href='https://atom.io'>Atom</a>, dar și un notepad este suficient. <b>Nu</b> poți folosi microsoft word pentru a crea fișiere html",
				"p4":"Iată pașii pe care trebuie să-i urmezi pentru a putea crea pagina ta web la tine pe calculator:",
				"p5":"<ol><li>Crează un fișier text nou</li><li>Copiază pagina ta din editor în acest document nou. Ai grijă să copiezi tot de la <!DOCTYPE html> până la </html></li><li>Salveză fișierul ca “prima_mea_pagină.html” (foarte important .html). La tip-ul fișierului alege “html” dacă ai opțiunea sau dacă nu “toate fișierele”</li><li>Dacă ai poțiunea “encodare” alege “utf-8”</li></ol>",
				"p6":"Gata, acum ai un fișier html complet funcțional pe calculatorul tău. Dacă vrei să vezi cum îți arată pagina tot ce trebuie să faci este să-l deschizi într-un browser (aceasta ar trebui să fie opțiunea implicită pentru deschiderea fișierelor html. Dacă nu este fă pur și simplu click dreapta pe fișier și la “deschide cu…” alege browserul tău preferat). Acum poți vedea cum arată pagina ta într-un broser. Tot ce mai trebuie să faci este să cumperi un domeniu și să urci pagina pe un server ca să o poată vedea toată lumea."
			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"Validator":"Pass(htmlDocData)",
			"Instructions": {
				"i1": "După ce ai creat documentul la tine pe calculator apașă pe butonul execută pentru a păși cu stil în lumea minunată a CSS-ului"
			},
			"Next Lesson":"ce_este_css:css-start"
		},
		"ce_este_css:css-start": {
			"Title": "CSS- Start",
			"Text": {
				"p1":"Acum că știm să creem documente html, a venit timpul să le și aranjăm (stilizăm) puțin. Pentru a modifica aspectul estetic al elementelor de pe pagina noastră vom folosi un limbaj numit CSS (Cascading Style Sheets).",
				"p2":"<ol><li>Cascading -care e citit ca într-o cascadă (una după alta)- se referă la felulîn care browser-ul hotărăște ce fișier CSS să folosească în caz că există mai multe. Mai multe detalii despre asta mai târziu.</li><li>Style- stil- care stabilește stilul(felul) în care trebuie să arate pagina.</li><li>Sheets-foaie/coală-.</li></ol>",
				"p3":"Adică numele CSS ne indică faptul că el este o foaie (un fișier) care inidcă browserului cum trebuie să arate elementele din html.",
				"p4":"În editor ai un exemplu de pagină web stilizată cu ajutorul CSS-ului. Dacă vrei să vezi cum arată pagina fără CSS sterge pur și simplu rândul al cincelea."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"index.css\"/>\n\t\t<title>Ariesanu Stephan-Alexander</title>\n\t</head>\n\t<body>\n\t\t<h1>Bine ai venit pe pagina lui Stephan</h1>\n\t\t<br/>\n\t\t<h3>Ce îmi dresc să realizez după ce termin cursurile de pe academia de cod</h3>\n\t\t<p>Să dețin cea mai mare platformă educațională din Europa</p>\n\t\t<h3>Sunt mândru că până acum...</h3>\n\t\t<p>Nu am renunțat</p>\n\t\t<h3>Filmele mele preferate</h3>\n\t\t<table>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Numele filmului</th>\n\t\t\t\t\t<th>Anul premierei</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody >\n\t\t\t\t<tr>\n\t\t\t\t\t<td>A clockwork orange</td>\n\t\t\t\t\t<td>1972</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Kill Bill</td>\n\t\t\t\t\t<td>2003</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Matrix</td>\n\t\t\t\t\t<td>1999</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Tomorrowland</td>\n\t\t\t\t\t<td>2015</td>\n\t\t\t\t </tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Interstellar</td>\n\t\t\t\t\t<td>2014</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>The Dark Knight </td>\n\t\t\t\t\t<td>2008</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t\t<tfoot>\n\t\t\t</tfoot>\n\t\t</table>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"body{\n\tbackground-color: rgba(0, 33, 56, 0.75);\n}\n\nh1{\n\ttext-align: center;\n\tcolor: orange;\n\tfont-size: 60px;\n\tfont-weight: lighter;\n}\n\nh3{\n\tfont-style: italic;\n\tcolor: white;\n\tfont-size: 24px;\n\tmargin-left: 40px;\n}\n\np{\n\tmargin-left: 40px;\n\tfont-size: 18px;\n\tcolor: orange;\n}\n\ntable {\n\tmargin-left: 40px;\n\tborder-collapse: collapse;\n\twidth: 80%;\n}\n\nth, td {\n\ttext-align: left;\n\tpadding: 8px;\n}\n\ntr:nth-child(even){background-color: lightblue}\n\ntr:nth-child(odd){background-color: white}\n\nth {\n\tfont-size: 18px;\n\tbackground-color: orange;\n\tcolor: white;\n}",
			"Validator":"Pass(htmlDocData)",
			"Instructions": {
				"i1": "După ce ai creat documentul la tine pe calculator apașă pe butonul execută pentru a păși cu stil în lumea minunată a CSS-ului"
			},
			"Next Lesson":"ce_este_css:link spre CSS"
		},
		"ce_este_css:link spre CSS": {
			"Title": "Link spre CSS",
			"Text": {
				"p1":"După cum ai aflat deja din lecția trecută, elementul care face legătura între fișierul HTML și CSS este tag-ul &#60link/&#62. La fel ca și tag-urile &#60meta/&#62 și &#60img/&#62 el se închide singur. Și deoarece conține informații necesare paginii și nu conținut de pagină el vine așezat în head.",
				"p2":"Tag-ul &#60link/&#62 trebuie să conțină trei atribute. Primul se numeste “rel”(de la relație). El indică ce este documentul din link față de fișierul html/ în ce relație se află cele două. noi vrem ca fișierul către care construim link-ul să fie CSS-ul acestui fișier html, și de acea îi atribuim valoarea “stylesheet”.",
				"p3":"Al doilea atribut pe care trebuie săl atribuim fișierului CSS este atributul “type”, care indică ce fel de fișier este fișierul către care construim link-ul. În cazul nostru vrem ca atributul type să aibă valoarea “text/css”, pentru a indica browser-ului că urmează să citească un fișier text pe care trebuie să-l interpreteze drept css.",
				"p4":"Al treilea și ultimul atribut obligatoriu pentru a crea un link către fișierul css este vechiul nostru prieten “href”, care indică de unde să ia fișierul CSS. Spre deosebire însă de atributul href din tag-ul &#60a&#62&#60a&#62, care de obicei caută o pagină pe internet, tag-ul link caută, în marea majoritate a cazurilor, un fișier pe calculatorul tău, respectiv pe server. Te vom învăța mai târziu cum să găsești fișiere (HTML-uri, CSS-uri, JS-uri, imagini etc) pe un calculator, respectiv pe server. Pentru moment îți spunem noi că atributul href al link-ului trebuie să aibă valoarea “index.css”",
				"p5":"Mai jos ai un exemplu de link:",
				"p6":"<div class='codeSnipped'> &#60link rel=\"stylesheet\" type=\"text/css\" href=\"test.css\"/&#62</div>"
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\n\t\t<title>Ariesanu Stephan-Alexander</title>\n\t</head>\n\t<body>\n\t\t<h1>Bine ai venit pe pagina lui Stephan</h1>\n\t\t<br/>\n\t\t<h3>Ce îmi dresc să realizez după ce termin cursurile de pe academia de cod</h3>\n\t\t<p>Să dețin cea mai mare platformă educațională din Europa</p>\n\t\t<h3>Sunt mândru că până acum...</h3>\n\t\t<p>Nu am renunțat</p>\n\t\t<h3>Filmele mele preferate</h3>\n\t\t<table>\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Numele filmului</th>\n\t\t\t\t\t<th>Anul premierei</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody >\n\t\t\t\t<tr>\n\t\t\t\t\t<td>A clockwork orange</td>\n\t\t\t\t\t<td>1972</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Kill Bill</td>\n\t\t\t\t\t<td>2003</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Matrix</td>\n\t\t\t\t\t<td>1999</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Tomorrowland</td>\n\t\t\t\t\t<td>2015</td>\n\t\t\t\t </tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>Interstellar</td>\n\t\t\t\t\t<td>2014</td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>The Dark Knight </td>\n\t\t\t\t\t<td>2008</td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t\t<tfoot>\n\t\t\t</tfoot>\n\t\t</table>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"body{\n\tbackground-color: rgba(0, 33, 56, 0.75);\n}\n\nh1{\n\ttext-align: center;\n\tcolor: orange;\n\tfont-size: 60px;\n\tfont-weight: lighter;\n}\n\nh3{\n\tfont-style: italic;\n\tcolor: white;\n\tfont-size: 24px;\n\tmargin-left: 40px;\n}\n\np{\n\tmargin-left: 40px;\n\tfont-size: 18px;\n\tcolor: orange;\n}\n\ntable {\n\tmargin-left: 40px;\n\tborder-collapse: collapse;\n\twidth: 80%;\n}\n\nth, td {\n\ttext-align: left;\n\tpadding: 8px;\n}\n\ntr:nth-child(even){background-color: lightblue}\n\ntr:nth-child(odd){background-color: white}\n\nth {\n\tfont-size: 18px;\n\tbackground-color: orange;\n\tcolor: white;\n}",
			"Validator":"CheckForCssLink(htmlDocData)",
			"Instructions": {
				"i1": "După ce ai creat documentul la tine pe calculator apașă pe butonul execută pentru a păși cu stil în lumea minunată a CSS-ului"
			},
			"Next Lesson":"ce_este_css:Primul stil"
		},
		"ce_este_css:Primul stil": {
			"Title": "Primul stil",
			"Text": {
				"p1":"Ok, acum că am construit legătura(link-ul) de la html la CSS, e timpul să adăugăm în CSS proprietățile (stilurile) pe care le dorim aplicate textului. Orice “comandă” în CSS este alătuită din 3 elemente, selectorul, proprietatea și valoarea. Mai jos ai un exemplu pe care îl vom explica pas cu pas",
				"p2":"<div class='codeSnipped'>h1{<br> &#160 &#160 &#160 color:orange;<br>}</div>",
				"p3":"Codul din exemplu schimbă culoarea textului tuturor elementelor h1 de pa pagina în portocaliu. Cele 3 elemente menționate mai sus sunt:",
				"p4":"<ol><li>Selectorul este h1. Acest element indică fișierului html ce elemente(tag-uri și nu numai) să modifice. Dacă folosim selectorul h1 html-ul va ști să aplice schimbările dintre parantezele acolade tuturor elementelor cuprinse între tag-urile &#60h1&#62&#60/h1&#62. Dacă vrei să selectezi un tag html, atunci numele selectorului este identic cu al tag-ului (fără semnele “<”, “>” sau “/>”)</li><li>Proprietatea este color-culoare-. Aceasta indică fișierului ce proprietate a elementului selectat să modifice. În cazul nostru vrem să modificăm culoarea textului.</li><li>Valoarea este orange-portocaliu-. Aici specificăm fișierului html ce valoare vrem să aibă proprietatea numită a elementelor selectate.</li></ol>",
				"p5":"Recapitulare : Pentru a modifica culoarea textului din elementele h1 din negru în portocaliu selectăm elementele h1 și schimbăm proprietatea lor numită “color”-culoare- în portocaliu.",
				"p6":"Important:",
				"p7":"<ul><li>Toate proprietățile selectorului trebuiesc scrise între paranteze acolade (care trebuiesc închise după ce am adăugat toate proprietățile pe care dorim să le modificăm)</li><li>Între proprietate și valoarea pe care dorim să o atribuim acesteia se pune semnul “:”(<b>nu</b> semul “=”)</li><li>După ce scriem valoarea proprietăților trebuie să punem semnul “;” pentru a indica browser-ului că acolo se termină o “comandă” completă. Imaginează-ți semnul “;” ca pe punctul de la finalul propoziției. După ce scriem o propoziție treuie să punem punct, altfel cel ce ne citește textul nu mai înțelege ce dorim să-i transmitem. La fel se întâmplă și în cazul calculatoarelor, doar că ele nu folosesc semnul “.” ci semul “;”.</li></ul>",
				"p8":"E timpul să scri și tu niște CSS."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\n\t\t<title>Ariesanu Stephan-Alexander</title>\n\t</head>\n\t<body>\n\t\t<h1>Bine ai venit pe pagina lui Stephan</h1>\n\t\t<br/>\n\t\t<h3>Ce îmi dresc să realizez după ce termin cursurile de pe academia de cod</h3>\n\t\t<p>Să dețin cea mai mare platformă educațională din Europa</p>\n\t\t<h3>Sunt mândru că până acum...</h3>\n\t\t<p>Nu am renunțat</p>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"h1{\n\tcolor: orange;\n}",
			"Validator":"CheckLessonPrimulStil(htmlDocData)",
			"Instructions": {
				"i1":"Scrie link-ul către CSS",
				"i2": "Schimbă culoarea textului din interiorul tag-urilor <h3> </h3> în ce culoare vrei.",
				"i3":"Nu uita să folosești selectorul corect (numele selectorului este identic cu numele tag-ului)",
				"i4":"Nu uita că prorprietățile și valorile lor trebuiesc încadrate între paranteze acolade (adică astea :“{}”)",
				"i5":"Nu uita că valorile nu se scriu între ghilimele",
				"i6":"Nu uita să pui “;” după ce scri valoarea",
				"i7":"Nu uita că valorile pentru culoare corespund cu numele culorii în engleză. Câteva exemle sunt: blue(albastru), red(roșu), yellow(galben), green(verde), grey(gri)",
				"i8":"Apasă butonul execută pentru a vedea rezultatul"
			},
			"Next Lesson":"ce_este_css:Tipur de culori"
		},
		"ce_este_css:Tipur de culori": {
			"Title": "Tipur de culori",
			"Text": {
				"p1":"Felicitări, tocmai ai modificat pentru prima oară un atribut al unui tag cu ajutorul CSS-ului. Hai să mai vorbim un pic despre atributul de culoare.",
				"p2":"Primul lucru pe care trebuie să-l ști este că această proprietate, numită “color”-culoare-, este că poate fi atribuită oricărui element ce poate conține text și că ea va face mereu acelaș lucru, va schimba culoarea textului. Asta înseamnă că indiferent dacă vrei să schimbi culoarea textului dintr-un paragraf, un titlu de paragraf, un link etc., procesul va fi mereu acelaș.",
				"p3":"Un alt aspect important, pe care probabil că l-ai sesizat și tu lecția trecută este faptul că am dat proprietății “color” valoarea “orange”-portocaliu-. Această metodă nu este foarte utilă deoarece există mii de noanțe de portocaliu și noi trebuie să putem specifica html-ului ce nuanță de portocaliu să folosească pentru pagina noastră. Pentru a face asta avem două posibilități, coduri hexazecimale și coduri rgb.",
				"p4":"Să începem cu codurile hexazecimale (coduri hex). Acestea sunt ansamble de 6 (uneori 8, dar vom discuta despre aspectul acestaîntr-o altă lecție ) caractere, care cuprind toate culorile pe care le poate afișa un calcultor. Valorile posibile pentru un caracter hexazecimal sunt cifrele de la 0 la 9 și literele de la “A” la “F”. Deoarece un cod hexazecimal este de fapt un număr în baza 16, de unde și numele, înaintea oricărui cod hexazecimal se trece semnul “#” pentru a indica browser-ului că cea ce urmează este un număr. Ememple de coduri hex: alb=“#FFFFFF”, negru=“#000000”, o nuanță de verde=“#3DDE37”, o nuanță de albadtru=“#264DEB”. Nu te teme dacă nu ști cum funcționează aceste coduri, te vom învăța de unde să le obți și mai târziu vom vorbi un pic și despre cum au apărut și cum funcționează (dacă dorești desigur, acea lecție nu este necesară pentru dezvoltarea web ci ține mai mult de cultură generală, în consecință este voluntară). ",
				"p5":"Codurile rgb (red, green, blue -roșu, verde, albastru-) sunt grupuri de 3 numere cu valori cuprinse între 0 și 255. La fel ca și codurile hex ele reprezintă toate culorile pe care le poate afișa un calculator. Ele se scriu sub următoarea formă: “rgb(223, 112, 60)”, “rgb(127, 18, 70)”, “rgb(255, 255, 255)”.",
				"p6":"Cea mai ușoară metodă de a obține aceste valori este cu ajutorul unui program extern. Noi punem elevilor la dispoziție un asemenea program. Apasă pe butonul cu litera “C” de sub glosar. Se va deschide un meniu în care vei putea alege culoarea dorită și obține astfel atât codul hex cât și rgb.",
				"p7":"Poți foloți folosi ce metodă vrei pentru a coda culorile în CSS-ul tău. În general majoritatea lumii merge pe coduri hex deoarece sunt mai scurte (pot fi tastate mai rapid și reținute mai ușor)."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\n\t\t<title>CSS</title>\n\t</head>\n\t<body>\n\t\t<h1>Să nu uiți de ai învățat până acum</h1>\n\t\t<h2>Să nu renunți</h2>\n\t\t<h3>Și să cauți mereu să devi mai bun decât ai fost înainte</h3>\n\t\t<h4>Și să îți facă mereu plăcere să creezi ceva al tău</h4>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"h1{\n\tcolor: #D48F79;\n}\n\nh2{\n\tcolor: rgb(45, 181, 93);\n}",
			"Validator":"CheckLessonTipuriDeCulori(htmlDocData)",
			"Instructions": {
				"i1":"Am colorat textul din primele două subtitluri. Colorează, în alte culori celelalte două subtitluri. Poți folosi ce sistem vrei"
			},
			"Next Lesson":"ce_este_css:Comentarii"
		},
		"ce_este_css:Comentarii": {
			"Title": "Comentarii",
			"Text": {
				"p1":"Ok, am aflat cum putem schimba culorile documentului nostru HTML. Hai să învățăm acum cum putem introduce comentarii în CSS-ul nostru.",
				"p2":"La fel ca și în HTML (și în orice alt limbaj) comentariile sunt acel text pe care calculatorul îl ignoră, dar care ne poate ajuta pe noi să înțelegem mai bine coul sau să nu uităm anumite lucruri.",
				"p3":"În CSS comentariile au forma următoar:",
				"p4":"<div class='codeSnipped'>/* Textul comentariului */</div>",
				"p5":"Poți pune comentariul une dorești și poți scrie ce vrei, textul va fi complet ignorat e către browser când va afișa pagina web.",
				"p6":"Cea mai ușoară metodă de a obține aceste valori este cu ajutorul unui program extern. Noi punem elevilor la dispoziție un asemenea program. Apasă pe butonul cu litera “C” de sub glosar. Se va deschide un meniu în care vei putea alege culoarea dorită și obține astfel atât codul hex cât și rgb.",
				"p7":"Poți foloți folosi ce metodă vrei pentru a coda culorile în CSS-ul tău. În general majoritatea lumii merge pe coduri hex deoarece sunt mai scurte (pot fi tastate mai rapid și reținute mai ușor)."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\t\t<link href=\"index.css\" rel=\"stylesheet\" type=\"text/css\"/>\n\t\t<title>CSS</title>\n\t</head>\n\t<body>\n\t\t<h1>Să nu uiți de ai învățat până acum</h1>\n\t\t<h2>Să nu renunți</h2>\n\t\t<h3>Și să cauți mereu să devi mai bun decât ai fost înainte</h3>\n\t\t<h4>Și să îți facă mereu plăcere să creezi ceva al tău</h4>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"h1{\n\tcolor: #D48F79;\n}\n\nh2{\n\tcolor: rgb(45, 181, 93);\n}\n/* #FF0000 este codul hexazecimal al culorii roșu. */\n\n/* Aici\nai\nși\nun\ncomentariu\npe\nmai\nmulte\nranduri*/",
			"Validator":"CheckLessonComentariiCss(htmlDocData)",
			"Instructions": {
				"i1":"Adaugă și tu un comentariu în CSS astfel încât să fie în total minim trei."
			},
			"Next Lesson":"ce_este_css:Alte proprietăți ale textului"
		},
		"ce_este_css:Alte proprietăți ale textului": {
			"Title": "Alte proprietăți ale textului",
			"Text": {
				"p1":"Acum că am învățat să schimbăm culoarea textului de pe pagina noastră, e timpul să mai învățăm câteva proprietăți ale textului și cum să le edităm.",
				"p2":"<ul><li>“font-style” -stilul fontului-. Poate lua valorile “italic”, “oblique”-oblic- sau “normal”. Diferența dintre oblic și italic este faptul că italic e un pic mai tilizat, și seamănă un pic cu scrisul de mână în timp ce oblique nu face decât să încline un pic caracterele. Dacă nu specifici în css valoarea pentru “font-style” acesta se va comporta a și când ar avea valoarea normal.</li><li>“font-weight” -greutatea (adică grosimea) fontului-. Această proprietate definește grosimea textului de pe pagină. Deși există mai multe valori posibile pentru această proprietate, valorile pe care ea le poate lua depind de font-ul folosit (Arial, Times New Roman, etc) și de browser. Din acest motiv recomandăm ca împreună cu această proprietate să se folosească doar valorile “bold” -îngroșat- și “normal”. Vom explica într-o lecție ulterioară care sunt celelalte valori pe care le poate lua această proprietate. </li></ul>",
				"p3":"Pentru a schimba mai multe proprietăți ale aceluiaș element, ajunge să selectăm elementul o singură dată. Și să modificăm mai multe proprietăți simultan. Adică dacă vrem să schimbăm și culoarea și grosimea textului din interiorul tag-ului &#60h1&#62&#60/h1&#62, putem face asta în felul următor:",
				"p4":"<div class='codeSnipped'>h1{<br> &#160 &#160 color:white;<br> &#160 &#160 font-weight:bold;<br>}</div>",
				"p5":"Hai să ne obișnuim un pic cu aceste proprietăți și să ne folosim de ale pentru a modifica textul de pe pagina noastră."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\t\t<link href=\"index.css\" rel=\"stylesheet\" type=\"text/css\"/>\n\t\t<title>CSS</title>\n\t</head>\n\t<body>\n\t\t<h1>Să nu uiți de ai învățat până acum</h1>\n\t\t<h2>Să nu renunți</h2>\n\t\t<h3>Și să cauți mereu să devi mai bun decât ai fost înainte</h3>\n\t\t<h4>Și să îți facă mereu plăcere să creezi ceva al tău</h4>\n\t\t<p>Îți mulțumim din suflet că te-ai alăturat academiei de cod!</p>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"h1{\n\tcolor: #D48F79;\n}\n\nh2{\n\tcolor: #D48F79;\n}\n\nh3{\n\tcolor: #D48F79;\n}\n\nh4{\n\tcolor: rgb(45, 181, 93);\n}",
			"Validator":"CheckLessonPropText(htmlDocData)",
			"Instructions": {
				"i1":"Schimbă proprietățiile textului din minim două subtitluri de pe pagina ta, astfel încât ele să fie scrise italic.",
				"i2":"Îngroașă texul paragrafului și schimbă-i culoarea",
				"i3":"Nu uita că valorile proprietățiilor nu se trec între ghilimele și că după ce dai valoarea unei porprietăți trbuie să introduci simbolul “;”, pentru a indica browserului că acolo se termină o comandă."
			},
			"Next Lesson":"ce_este_css:Mărimea fontului"
		},
		"ce_este_css:Mărimea fontului": {
			"Title": "Mărimea fontului",
			"Text": {
				"p1":"Vom mai vorbi despre încă o proprietate a fontului (textului) și anume “font-size” -marimea fontului-.",
				"p2":"Pentru a putea modifica marimea fontului trebuie mai întâi să stabilim ce unitate de măsură folosim. Pentru moment vom folosi pixel-ul (prescurtat px) drept unitate de măsură, iar mai târziu vom vorbi și despre alte unități.",
				"p3":"Pentru a modifica mărimea textului din interiorul unui tag-ului &#60h2&#62&#60/h2&#62 la 30 de pixeli vom folosi următoarea sintaxă:",
				"p4":"<div class='codeSnipped'>h2{<br> &#160 &#160 font-size:30px;<br>}</div>",
				"p5":"<b>Important</b>: Între valoare atributului și unitatea de măsură <b>nu</b> se pune spațiu.",
				"p6":"<b>Notă</b>: Sintaxă = modul în care se scriu comenzile pentru a putea fi citite de un anumit limbaj, în cazul nostru CSS"
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\t\t<link href=\"index.css\" rel=\"stylesheet\" type=\"text/css\"/>\n\t\t<title>CSS</title>\n\t</head>\n\t<body>\n\t\t<h1>Să nu uiți de ai învățat până acum</h1>\n\t\t<h2>Să nu renunți</h2>\n\t\t<h3>Și să cauți mereu să devi mai bun decât ai fost înainte</h3>\n\t\t<h4>Și să îți facă mereu plăcere să creezi ceva al tău</h4>\n\t\t<p>Îți mulțumim din suflet că te-ai alăturat academiei de cod!</p>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"CheckLessonFontSize(htmlDocData)",
			"Instructions": {
				"i1":"Schimbă mărimea textului din interiorul elementului h1 la 60 de pixeli(px)",
				"i2":"Nu uita să nu pui spațiu între valoarea mărimii -60- și unitatea de măsură -px-. Ele se scriu legat!",
				"i3":"Dacă vrei poți să modifici și mărimea fontului din alte tag-uri. Dacă vrei să te joci și cu alte unități de măsură poți folosi em, %, vh sau vw (tot legate de valoarea mărimii). Vom explica mai târziu ce reprezintă fiecare"
			},
			"Next Lesson":"ce_este_css:Aliniere de text"
		},
		"ce_este_css:Aliniere de text": {
			"Title": "Aliniere de text",
			"Text": {
				"p1":"Am ajuns la ultima proprietate a textului pe care o vom discuta în această secțiune a cursului. În cadrul acestei lecții vom învăța cum să aliniem textul. Proprietatea care ne permite să facem asta este “text-align”. ",
				"p2":"Iată cele mai folosite valiori ale acestei proprietăți:",
				"p3":"<ul><li>left (stânga) :alinează textul la stânga. Aceasta este valoarea implicită pentru alinierea textului.</li><li>center (centru) :alinează textul la centru</li><li>right (dreapta) :alinează textul la dreapta</li><li>justify (justificat) :alinează și spațiază textul în așa fel încât el să umple pe cât posibil rândurile uniform(vom oferi un ememplu și vei înțelege despre ce e vorba)</li></ul>"
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\t\t<link href=\"index.css\" rel=\"stylesheet\" type=\"text/css\"/>\n\t\t<title>CSS</title>\n\t</head>\n\t<body>\n\t\t<h1>Să nu uiți de ai învățat până acum</h1>\n\t\t<h2>Să nu renunți</h2>\n\t\t<h3>Și să cauți mereu să devi mai bun decât ai fost înainte</h3>\n\t\t<h4>Și să îți facă mereu plăcere să creezi ceva al tău</h4>\n\t\t<p>Îți mulțumim din suflet că te-ai alăturat academiei de cod!</p>\n\t\t<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur, vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?\n\t\t</p>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"CheckLessonTextAlign(htmlDocData)",
			"Instructions": {
				"i1":"Folosește valorile “left”, “right” și “center” pentru a alinia titlurile de paragraf de pe pagina ta. Foloește fiecare valoare minim o dată.",
				"i2":"Am mai adăugat și un paragraf pe pagina ta. Setează alinierea textului la valoarea “justify” pentru acest paragraf și privește modul în care acesta este acum așezat în pagină.",
				"i3":"Apasă pe butonul “execută” pentru a trece la următoarea lecție."
			},
			"Next Lesson":"ce_este_css:Span și div"
		},
		"ce_este_css:Span și div": {
			"Title": "Span și div",
			"Text": {
				"p1":"Ok, acum că știm cum să facem textul de pe pagina noastră să arate așa cum vrem noi, hai să ne întoarcem la u pic de html.",
				"p2":"În cadrul lecției ăsteia vom învăța despre elementele span -întindere, lungime- și div -divizune/ secțiune de pagină-, care ne vor ajuta să aplicăm CSS doar asupra anumitor părți din pagină.",
				"p3":"Să începem cu elementul &#60span&#62&#60/span&#62 . Acesta are rolul de a selecta anumite bucăți din text, pentru a aplica CSS-ul doar asupra lor. De exemplu dacă vrem să scriem propoziția “Vă rugăm frumos, nu trântiți ușa” și dorim pentru cuvântul “nu” să să îngroșăm textul, vom pune în jurul cuvântului “nu” un <span></span> și vom indica în CSS faptul că dorim ca textul din span să fie scris în <b>bold</b>.",
				"p4":"Mai jos ai acest exemplu scris în html și css:",
				"p5":"<div class='codeSnipped'>&#60!-- HTML --&#62<br><br>&#60p&#62Vă rugăm frumos, &#60span&#62nu&#60/span&#62 trântiți ușa&#60/p&#62</div>",
				"p6":"<div class='codeSnipped'> /* CSS */ <br><br>span{<br>&#160 &#160 &#160font-weight:bold;<br>}</div>",
				"p7":"<b>Important</b>: Nu folosi &#60span&#62&#60/span&#62 pentru a cuprinde mai multe elemente html. Span este un element folosit pentru a selecta o bucată de text. El vine pus doar în jurul textului. Pentru a grupa mai multe elemente html se folosește elementul &#60div&#62&#60/div&#62, despre care vorbim în lecția următoare."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\t\t<link href=\"index.css\" rel=\"stylesheet\" type=\"text/css\"/>\n\t\t<title>CSS</title>\n\t</head>\n\t<body>\n\t\t<h3>Despre mine</h3>\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"",
			"Validator":"CheckLessonSpanAndDiv(htmlDocData)",
			"Instructions": {
				"i1":"Pe pagina ta html include un paragraf (<p></p>) în care să descri ceva legat de tine.",
				"i2":"În jurul numelui tău sau a altor cuvinte pe care vrei să pe scoți în evidență așează un element <span></span>",
				"i3":"În CSS schimbă stilul textului din interiorul elementului span în italic (font-style:italic;)"
			},
			"Next Lesson":"ce_este_css:Span și div - Partea a doua"
		},
		"ce_este_css:Span și div - Partea a doua": {
			"Title": "Span și div - Partea a doua",
			"Text": {
				"p1":"Felicitări, tocmai ai învățat un tag nou, care împreună cu CSS-ul te poate ajuta să conferi mai multă personalitate textului de pe pagina ta. Acum vom învăța și cum și de ce să folosim elementul &#60div&#62&#60/div&#62. Elemenul div este de departe cel mai folosit element în paginile web moderne. Hai să îl cunoaștem mai bine.",
				"p2":"După cum am mențiunat deja “div” este prescurtarea pentru divison, adică diviziune/secțiune de pagină. El este folosit pentru a grupa împreună elemente care au acelaș scop din punct de vedere logic. Tot ce vezi pe pagini drept apărând într-un chemar, într-un rând, într-o coloană sau în orice ad mod separat de celelalte elemente este înfășurat într-un div.",
				"p3":"în exemplul de mai jos ne imaginăm că vrem să creem pagina unei firme. Această firmă ne-a cerut să aibă pe prima pagină trei secțiuni, “Depre firma”, “Depre produse” și “Depre angajați”. Deoarece secțiunile sunt separate în mod logic, le separăm și noi în cod cu ajutorul tag-ului &#60div&#62&#60/div&#62. Mai târziu vom folosi CSS-ul pentru a diferenția secțiuniile și din punct de vedere estetic. Pentru moment am adăugat noi niște CSS ca să aranjăm aspectul div-urilor.",
				"p4":"<div class='codeSnipped'>&#60body&#62<br>&#160 &#160 &#160&#60div&#62<br>&#160 &#160 &#160&#160 &#160 &#160    &#60h3&#62Depre firma&#60/h3&#62<br>&#160 &#160 &#160&#160 &#160 &#160    &#60p&#62Text despre firmă&#60/p&#62<br>&#160 &#160 &#160&#160 &#160 &#160    &#60img src=\"poza_cu_firma.jpg\"/&#62<br>&#160 &#160 &#160&#60/div&#62<br><br>&#160 &#160 &#160&#60div&#62<br>&#160 &#160 &#160&#160 &#160 &#160    &#60h3&#62Depre produse&#60/h3&#62<br>&#160 &#160 &#160&#160 &#160 &#160    &#60p>Text despre produse&#60/p&#62<br>&#160 &#160 &#160&#160 &#160 &#160    &#60img src=\"poza_cu_produsele.jpg\"/&#62<br>&#160 &#160 &#160 &#60/div&#62<br><br><br>&#160 &#160 &#160 &#60div><br>&#160 &#160 &#160&#160 &#160 &#160&#60h3&#62Depre angajati&#60/h3&#62<br>&#160 &#160 &#160&#160 &#160 &#160    &#60p>Text despre angajati&#60/p&#62<br>&#160 &#160 &#160&#160 &#160 &#160    &#60img src=\"poza_cu_produsele.jpg\"/&#62<br>&#160 &#160 &#160 &#60/div&#62<br>&#60/body&#62</div>"
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t\t<meta charset=\"utf-8\"/>\n\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"index.css\"/>\n\t\t\t<title>CSS</title>\n\t</head>\n\n\t<body>\n\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"h3{\n\tfont-style: italic;\n\tcolor: darkgrey;\n\tfont-size: 24px;\n}\n\n\np{\n\tfont-size: 18px;\n\tcolor: orange;\n}\n\n\ndiv{\n\tborder-bottom: 1px solid black;\n\tpadding-left: 40px;\n\tbackground-color: rgba(0, 33, 56, 0.75);\n\tmargin:10px;\n}",
			"Validator":"CheckLessonSpanAndDivTwo(htmlDocData)",
			"Instructions": {
				"i1":"Scrie în editor o pagină cu trei secțiuni, fiecare alcătuită din minim trei elemente html, un titlu h3, si căte două paragrafe. Ai grijă ca fiecare secțiune să fie încadrată de un div ca-n exemplu.",
				"i2":"Poți introduce ce text vrei tu în aceste secțiuni. Dacă vrei poți să adaugă și alte elemente în secțiuni."
			},
			"Next Lesson":"ce_este_css:Clase"
		},
		"ce_este_css:Clase": {
			"Title": "Clase",
			"Text": {
				"p1":"Bravo, ai învățat să folosești &#60span&#62&#60/span&#62 și &#60div&#62&#60/div&#62 pentru a selecta bucăți de text și pentru a grupa împreună elemente de pe pagină. Ce se întâmplă însă dacă vrem ca anumite bucăți de text să apară <b>bold</b>, iar altele <i>italic</i>. Sau poate că dorim să dăm nume tag-urilor, pentru a putea aplica un stil CSS doar unui anumit/unor anumite tag și nu tuturor. Pentru asta putem folosi atributele CSS numite clase si id-uri.",
				"p2":"Hai să începem cu clasele. Să spunem că vrem ca anumite cuvinte pe pagina să apară <b>bold</b> iar altele să apară <i>italic</i>. Pentru a selecta aceste cuvinte vom folosi elemntul numit span. Pentru a diferenția care span trebuie să <b>îngroașe</b> cuvintele și care trebuie să le <i>încline</i> vom adăuga acestor span-uri clase diferite, iar apoi vom accesa și modifica aceste clase din CSS.",
				"p3":"O clasă se adaugă ca și orice alt atribut. Mai jos un exemplu:",
				"p4":"<div class='codeSnipped'>  Această propoziție este un &#60span class=\"ingrosat\"&#62exemplu&#60/span&#62.</div>",
				"p5":"După cum poți vedea atributul “class” -clasă- se scrie exact ca și celelalte atribute pe care le-ai învățat (href, src). <b>Nu</b> uita de ghilimele. Poți numi clasa cum dorești tu, dar recomandăm ca numele clasei să reflecte scopul ei.",
				"p6":"Perfect, acum am învățat cum să adăugăm clase elementelor noastre (poți adăuga atributul “class” oricărui element html dorești). Hai să vedem cum putem edita elementele cu o anumită clasă în CSS. Ca să selectăm în CSS clasa pe care dorim să o edităm folosim drept selector (chestia de dinaintea parantezelor acolade care ne spune ce element edităm) numele clasei cu un “.” în față. De exemplu pentru a face ca elementele din clasa “ingrosat” să și apară îngroșat vom folosi următoarea sintaxă:",
				"p7":"<div class='codeSnipped'>  .îngroșat{<br> &#160 &#160 &#160 font-weight:bold;<br>}</div>",
				"p8":"Remarcă faptul că în fața cuvântului “îngroșat” apare un punct lipit de acel cuvânt (<b>nu</b> lăsa spațiu între punct și cuvânt). Acel punct indică CSS-ului că e vorba de numele unei clase, nu al unui tag.",
				"p9":"Hai să incercăm un pic să folosim clasele pentru a adăuga și mai multă varietate pe pagina noastră"
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t\t<meta charset=\"utf-8\"/>\n\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"index.css\"/>\n\t\t\t<title>CSS</title>\n\t</head>\n\n\t<body>\n\t\t<p> normal normal normal <span>italic</span> normal <span>italic</span> <span>îngroșat</span> <span>italic</span> normal normal <span>îngroșat</span> <span>îngroșat</span></p>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"p{\n\tfont-size:26px;\n}",
			"Validator":"CheckLessonCssClass(htmlDocData)",
			"Instructions": {
				"i1":"În editor ai un paragraf ce conține cuvintele “normal” , “italic” și “îngroșat”. Cuvintele “italic” și “îngroșat” sunt înconjurate de fiecare dată de câte un <span></span>. Adauă acestora clasele “italic” (span-urilor din jurul cuvântului italic) și “bold” (span-urilor din jurul cuvântului îngroșat)",
				"i2":"În CSS folosește selectorii “.italic” și “.bold” pentru a schimba textul din interiorul span-urilor cu respectivele clase să fie italic, respectiv îngroșat. (Dacă ai uitat cum se face asta poți arunca o privire în dicționarul nostru de tag-uri, proprietăți și sintaxă din dreapta paginii)."
			},
			"Next Lesson":"ce_este_css:ID"
		},
		"ce_este_css:ID": {
			"Title": "ID",
			"Text": {
				"p1":"Perfect, ai învățat cum să folosești “class” pentru a diferenția anumite tag-uri html de celelalte. De asemenea am învățat cum să edităm proprietățiile CSS ale unei clase pentru a schimba aspectul acestor elemente. Acum e momentul să învățăm despre celelalt atribut al tag-urilor html folosit pentru a diferenția anumite tag-uri de restul. Numele acestui tag este “id”.",
				"p2":"Id se folosește într-o menieră foarte similară cu “class”, diferența fundamentală fiind faptul că atributul “id” se folosește pentru a diferenția elemete unice iar class este folosit pentru a marca/selecta/ diferenția <b>mai multe elemene cu însuțiri comune</b>. Altfel spus, pot exista o mulțime de elemente cu atributul class=“exemplu”, dar are voie să existe <b>un singur</b> element cu atributul id=“exemplu”.",
				"p3":"Metoda de a adăuga un id unui element html este aceași cu metoda de a adăuga orice alt atribut.",
				"p4":"<div class='codeSnipped'>   Această propoziție este un &#60span id=\"exemplu\"&#62exemplu&#60/span&#62.</div>",
				"p5":"Pentru a edita proprietățiile elementului care are un anumit id folosim o sintaxă asemănătoare cu cea folosită pentru “class”, doar că în loc de semnul “.” folosim semnul “#” (din nou <b>fără</b> spațiu între “#” și numele id-ului).",
				"p6":"<div class='codeSnipped'>  #exemplu{<br> &#160 &#160 &#160 font-size:48px;<br>}</div>",
				"p7":"Hai să folosim id pentru a selecta un anumit element de pe pagina noastră. Nu uita că la fec ca și “class”, “id” poate fi folosit pentru orice tag html dorești."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t\t<meta charset=\"utf-8\"/>\n\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"index.css\"/>\n\t\t\t<title>CSS</title>\n\t</head>\n\n\t<body>\n\t\t <h3>Beneficiile codului</h3>\n\t\t<p>Să poți înțelege ce se întâmplă în lumea digitală este unul dintre cele mai mari privilegii în epoca contemporană</p>\n\t\t<p>Totul funcționează pe bază de software.</p>\n\t\t<p>Și este foarte ușor să poți înțelege acestă lume</p>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"",
			"Validator":"CheckLessonCssID(htmlDocData)",
			"Instructions": {
				"i1":"În editor ai trei paragrafe. Dorim ca primul, și doar primul, să fie mai mare decât celelalte paragrafe de pe pagină și scris cu roșu (red)",
				"i2":"Adaugă primului paragraf id-ul “primul_paragraf_al_paginii” (direct paragrafului, nu e nevoie de vreun element span sau div)",
				"i3":"În CSS schimbă textul în așa fel încât ele să fie scris îngroșat și cu roșu"
			},
			"Next Lesson":"ce_este_css:Recapitulare"
		},
		"ce_este_css:Recapitulare": {
			"Title": "Recapitulare",
			"Text": {
				"p1":"Tocmai ți-ai însușit cele 4 cele mai utilizate unelte din web-development, “span”, “div”, “class” și “id”. Chiar poți spune că dacă le stăpânești pe acestea 4 patru ești la cu totul alt nivel decât erai înainte. Pentru a te ajuta să înțelegi mai bine care este adevărata putere a acestor elemente întreg următorul capitol va fi dedicat lor.",
				"p2":"Hai să ne amintim un pic ce fac fiecare:",
				"p3":"<ul><li><b>Span</b>: Tag html care selectează o anumită buncată de text</li><li><b>Div</b>: Tag html care grupează element împreună</li><li><b>Class</b>: Atribut html care îți permite să selectezi mai multe elemente html</li><li><b>ID</b>: Atribut html care îți permite să selectezi un singur element html</li></ul>",
				"p4":"Mai facem un exercițiu să ne obșinuim cu ele și apoi să le luăm pe fiecare în parte. Ia lecția asta ca pe un loc de joacă. Îți dăm noi niște sarcini, dar pe lângă ele poți să schimbi cam orie altcev vrei. Chiar te încurajăm să oferi personalitate lucrurilor pe care le creezi."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t\t<meta charset=\"utf-8\"/>\n\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"index.css\"/>\n\t\t\t<title>CSS</title>\n\t</head>\n\n\t<body>\n\t\t<h1>Aventura mea de pana acum</h1>\n\n\t\t<!-- Exemplu de secțune de pagina -->\n\n\t\t<div>\n\t\t\t<h3>Beneficiile codului</h3>\n\t\t\t<p>Să poți înțelege ce se întâmplă în lumea digitală este unul dintre cele mai mari privilegii în epoca contemporană</p>\n\t\t\t<p>Totul funcționează pe bază de software.</p>\n\t\t\t<p>Și este foarte ușor să poți înțelege acestă lume</p>\n\t\t</div>\n\n\t\t<!-- Sfarsitul sectiunii -->\n\n\t\t<h3>Dorintele mele</h3>\n\n\n\t\t<h3>Considerente de timp legate de educatia mea</h3>\n\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"",
			"Validator":"CheckLessonCssRecapOne(htmlDocData)",
			"Instructions": {
				"i1":"În editor ai un div cu un h3 și 3 paragrafe. Acesta serveste drept exemplu cum trebuie să arate o secțiune pe pagina ta.",
				"i2":"În editor mai sunt două h3-uri. Scrie și sub ele minim un paragraf și încadrează-le în div-uri.",
				"i3":"Fiecărui div adaugă-i clasa “secțiune_de_pagină” și editează în CSS această clasă",
				"i5":"Celui mai important div adaugă-i id-ul “secțiunea_principală” și editează acest id în CSS",
				"i6":"Folosește minim 3 span-uri pentru a scoate în evidență cuvintele mai importante.",
				"i7":"Editează pagina în continuare cum dorești tu"
			},
			"Next Lesson":"css-span_div_class_id:stilizare_de_div-uri"
		},
		"css-span_div_class_id:stilizare_de_div-uri": {
			"Title": "Stilizare de div-uri",
			"Text": {
				"p1":"Hai să disecăm un pic ce poate face de fapt un div. În editor ai un div care conține un paragraf. Ca să putem urmării comportamentul acestui div îi vom schimba culoarea de fundal (astfel o putem vedea pe pagina).",
				"p2":"Pentru a face asta vom folosi proprietatea “background-color” -culoare de fundal (backgorund=fundal , color=culoare)-. Acesteia îi putem aribui culorile la fel ca și proprietății “color” folosită pentru a schimba culoarea textului. Adică putem folosii numele culorii în engleză (red, yellow, orange, purple), coduri hex (ex. #AA324F) sau coduri rgb (ex. rgb (34,76, 123)). Nu uiat că ai unealta de ales culori în dreapta."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t\t<meta charset=\"utf-8\"/>\n\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"index.css\"/>\n\t\t\t<title>CSS</title>\n\t</head>\n\n\t<body>\n\t\t<div id=\"test\">\n\t\t\t<p>Hai să testăm proprietățiile unui div</p>\n\t\t</div>\n\n\t\t<div>\n\t\t\t<p>Alte div-uri pentru comparație</p>\n\t\t</div>\n\n\t\t<div>\n\t\t\t<p>Yei, text!</p>\n\t\t</div>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"",
			"Validator":"CheckLessonStilizareDivOne(htmlDocData)",
			"Instructions": {
				"i1":"Schimbă culoarea de fundal a div-ului în orice altă culoare (nu alb)",
				"i2":"Pentru a schimba culoarea div-ului folosește id-ul său, nu modifica culoarea tuturor div-urilor"
			},
			"Next Lesson":"css-span_div_class_id:stilizare_de_div-uri_-_partea_a_doua"
		},
		"css-span_div_class_id:stilizare_de_div-uri_-_partea_a_doua": {
			"Title": "Stilizare de div-uri - Partea a doua",
			"Text": {
				"p1":"Hai să vorbim ne uităm un pic mai atent la acest div. Remarcă faptul că lățimea sa se întinde pe întreaga pagină, iar înălțimea sa este egală cu cea a elementelor pe care le conține (în cazul nostru textul). Acesta este comportamentul implicit al div-urilor (și al oricărui elemtent care are ca tip de afișaj bloc, vom vorbii în curând și despre diversele tipuri de afișaj).",
				"p2":"Dar poate că noi nu ne dorim acest tip de comportament. Hai să vedem cum putem modifica lățimea și înălțimea unui div. Pentru a face asta ne vom folosi de două porprietăți noi, width -lățime- și height -înălțime-. Acestora le vom da valori în pixeli la fel ca în cazul proprietății “font-size”.",
				"p3":"Mai jos un exemplu:",
				"p4":"<div class='codeSnipped'>width:150px;<br>height:300px;</div>",
				"p5":"Codul de mai sus schimbă lățimea div-ului la 150 de pixeli și înățimea acestuia la 300 de pixeli. Nu uita să nu lași spațiu între numărul de pixeli (150 respectiv 300) și unitatea de măsură (px).",
				"p6":"Hai să schimbăm lungimea și lățimea div-ului pe care experimentăm."

			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"CSS":"",
			"Validator":"CheckLessonStilizareDivTwo(htmlDocData)",
			"Instructions": {
				"i1":"Schimbă înălțimea și lățimea div-ului. Pentru lățimea div-ului folosește o valoare mai mică de 200 de pixeli. Pentru înățime folosește o valoare peste 100px.",
				"i2":"Pentru a schimba proprietățiile div-ului folosește id-ul său, nu modifica proprietățiile tuturor div-urilor"
			},
			"Next Lesson":"css-span_div_class_id:unitati_de_masura"
		},
		"css-span_div_class_id:unitati_de_masura": {
			"Title": "Unități de măsură",
			"Text": {
				"p1":"Ok, hai să vedem ce s-a întâmplat. Foarte pe scurt div-ul nostru și-a schimbat înălțimea și lățimea la valorile indicate de noi. De asemenea putem remarca faptul că textul din interiorul div-ului s-a așezat în așa fel încât să nu iasă din acel div.",
				"p2":"Acum haide să discutăm un pic problema unitățiilor de măsură. Până acum ne-am familiarizat cu px-pixel. Problema prezentată de pixel este faptul că nu toate dispozitivele au aceași densitate de pixeli, adică la fel de mulți pixeli pe centimetru pătrat de ecran. De acea un div care are lățimea de 200px va fi mai îngust pe un ecran cu o rezoluție mare decât pe unul cu o rezoluție mică.",
				"p3":"Iată câteva exemple de unități de măsură pe care le putem folosi pe paginile noastre web (se aplică și pentru font-size și pentru width și height):",
				"p4":"<ul><li><b>px</b> (pixel) o cunoaștem, <b>nu</b> o recomandăm, deoarece diferite ecrane au diferite densități de pixeli</li><li><b>em</b> -o unitate de măsură bazată pe mărimea standard fontului. De ex dacă fontul într-un div are 20px și div-ul are înălțime de 2em înseamnă că div-ul are înălțime de 40px. <b>Nu</b> o recomandăm.</li><li><b>%</b> -procente- procente din elementul în care se află tag-ul respectiv. De ex dacă un div din body are width:50% înseamnă că acel div va avea lățimea jumătate din lățimea lui body. <i>Recomandăm această unitate</i></li><li><b>vh, vw</b> (viewport height și viewport width - viewport= suprafața pe care vezi pagina/elementul-). Procente din înălțimea respectiv lățimea ferestei browserului. 1vw = 1% din lățimea ferestrei; 1vh=1% din înălțimea ferestrei. <i>Recomandăm această unitate.</i></li><li><b>cm,mm,in,pt,pc</b> (centimetri, milimetri, inci, puncte, picarzi). Unități de măsură din sistemul metric și imperial. <b>Nu</b> le recomandăm, deoarece dorim ca pagina să se ajusteze în funcție de ecranul pe care o privim. De exemplu pe un ecram cu diagonală de 1 metru ne dorim ca literele să fie mult mai mari decât pe un ecran de telefon.</li></ul>",
				"p5":"<b>Notă</b>: Nu uita că <b>nu</b> se lasă spațiu între valoarea proprietății și unitatea de măsură"
			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"CheckLessonUnitatiDeMasura(htmlDocData)",
			"Instructions": {
				"i1":"Șterge valoarea proprietățiilor width și height scrise la lecția anterioară",
				"i2":"Setează lățimea div-ului #test astfel la ce valoare vrei tu folosind procentele (%) drept unitatea de măsură",
				"i3":"Setează înălțimea div-ului #test la ce valoare vrei tu folosind înălțimea ferestrei (vh) drept unitate de măsură"
			},
			"Next Lesson":"css-span_div_class_id:granite"
		},
		"css-span_div_class_id:granite": {
			"Title": "Granițele elementelor",
			"Text": {
				"p1":"Hai să vorbim un pic despre partea ce delimitează elementele, adică granița lor. Pentru a evidenția granița trebuie, în primul rând să specificăm ce fel de graniță dorim. Pentru asta folosim proprietea “border-style”-stilul graniței-. Aceasta poate lua valorile:",
				"p2":"<ul><li>none -niciuna-</li><li>hidden -ascunsă/invizibilă-</li><li>dotted -punctată-</li><li>dashed -liniată-</li><li>solid -solidă-</li><li>double -dublă-</li><li>groove -scobitură-</li><li>ridge -culme-</li><li>inset -spre interior-</li><li>outset -spre exterior-</li></ul>",
				"p3":"Nu le vom explica pe toate, te încurajăm pe tine să le încerci și să le vezi pe toate cum arată.",
				"p4":"Următorul lucru pe care trebuie să-l specificăm este grosimea graniței. Pentru asta folosim proprietatea “border-width”.",
				"p5":"Ultimul lucru pe care îl specificăm este culoarea graniței. Pentru asta folosim “border-color”",
				"p6":"Mai jos ai un exemplu de granită în CSS:",
				"p7":"<div class='codeSnipped'>  #exemplu{<br> &#160 &#160 &#160 border-style: solid;<br> &#160 &#160 &#160 border-width: 5px;<br> &#160 &#160 &#160 border-color: orange<br>}</div>"
			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"CheckLessonBorder(htmlDocData)",
			"Instructions": {
				"i1":"Adaugă elementului tău o graniță. Poți folosi ce stil (*exceptând “none” sau “hidden”), grosime și culoare dorești."
			},
			"Next Lesson":"css-span_div_class_id:margini_si_umpluturi"
		},
		"css-span_div_class_id:margini_si_umpluturi": {
			"Title": "Margini și umpluturi",
			"Text": {
				"p1":"Bravo! Asemănător cu border -granița- unui element există și “margin” -margine- și “ padding” -umplutură-. Acestea determină spațiul ce există între granița unui element și celelalte elemente de pe pagină. Ele se definesc în felul următor:",
				"p2":"<div class='codeSnipped'>  #exemplu{<br> &#160 &#160 &#160padding:30px;<br> &#160 &#160 &#160 margin:10vh;<br>}</div>",
				"p3":"Proprietatea <b>padding</b> determină cât de mult spațiu să existe între marginea elementului selectat și conținutul său, iar proprietatea <b>margin</b> determină cât spațiu să existe între element și celelalte elemente de pe pagină. Adică în exemplul de față elementul cu id-ul “exemplu” va fi la 10vh (10% din înălțimea ferestrei) de celelalte elemente de pe pagină, iar textul din interiorul elementului respectiv se va afla la 30 de pixeli de granița acestuia.",
				"p4":"<b>Notă</b>: toate distanțele se măsoară de la granița unui element până la marginea următorului element. În acest sens, padding-ul, fiind în interiorul graniței face parte din element și contribuie la înălțimea acestuia, dar proprietatea “margin” nu.",
				"p5":"Așadar proprietatea “margin” determină distanța dintre un element și elementele sale vecine, iar proprietatea “padding” determină căt spațiu să rămână între granița unui element și conținutul său. Hai să le testăm",
				"p6":"<b>Notă</b>: Proprietățiile <i>margin</i> și <i>padding</i> modifică distanța elementelor față de ganițe din toate cele patru părți (sus, jos stânga dreapta). Dacă dorești să modifici doar o anumită latură a elementelor poți folosi proprietăți precum margin-top su padding-left. Laturile posibile sunt:",
				"p7":"<ol><li>left -stânga-</li><li>right -dreapta-</li><li>top -sus-</li><li>bottom -jos-</li></ol>"
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"index.css\"/>\n\t\t<title>CSS</title>\n\t</head>\n\t<body>\n\n\t\t<div>\n\t\t\t<p>Hai să testăm proprietățiile unui div</p>\n\t\t</div>\n\n\t\t<div id=\"padding-test\">\n\t\t\t<p>Acest div are padding-ul schimbat</p>\n\n\t\t</div>\n\t\t<div id=\"margin-test\">\n\t\t\t<p>Iar acesta are marginile schimbate</p>\n\t\t</div>\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"div{\n\tborder-style: solid;\n\tborder-width: 5px;\n\tborder-color: orange;\n}",
			"Validator":"CheckLessonMarginsAndPadding(htmlDocData)",
			"Instructions": {
				"i1":"Adaugă elementului cu id-ul “margin-test” margini de 50 de pixeli.",
				"i2":"Adaugă elementului cu id-ul “padding-test” padding de 50 de pixeli."
			},
			"Next Lesson":"css-span_div_class_id:modelul_cutie"
		},
		"css-span_div_class_id:modelul_cutie": {
			"Title": "Modelul Cutie",
			"Text": {
				"p1":"În poza din editor poți vedea o reprezentare a cea ce se numește ”Box Model” -modelul cutiei- în CSS. Înțelegerea acestui sistem este un pas esențial în înțelegerea modului în care sunt construite elementele HTML, el fiind fundamentul pe baza căruia sunt structurate toate elmentele HTML.",
				"p2":"Modelul cutiei este alcătuit din 4 componente (De la exterior spre interior): Marginile, Granița, Umplutura și Conținutul. Iată concret ce reprezintă fiecare:",
				"p3":"<ol><li>Marginea -Margin- reprezintă distanța dintre un element HTML și celelalte elemente din apropierea sa. Dacă setăm unui element marginea să fie de 20px înseamnă că între acest element și elementele din apropierea sa vor fi 20px distanță. Foarte important este de reținut faptul că marginile <b>se pot suprapune</b>, adcă dacă două elemente vecine au fiecare marginea de căte 10px distanța dintre cele două elemente va fi de 10px, nu de 20px (câte 10 de la fiecare element). De asemenea este important de reținut faptul că <b>marginile nu fac parte din element</b>. Ele se află la exteriorul elementului. Dacă setăm culoarea de fundal a unui element HTML spațiul reprezentat de margine <b>nu</b> va fi colorat și el.</li><li>Granița -Border- reprezintă chiar partea care delimitează un element/ granița dintre acel element și restul paginii. Acesta este ”locul din care începe elementul”. Ea poate fi imaginată exac ca și granița unei tări.</li><li>Umplutură -Padding- reprezintă spațiul dinte un element și conținutul său. Dacă stăm spre exemplu padding-ul unui element la 20px atunci va exista un spțiu de 20px între granița elementului respectiv și conținutul său.</li><li>Conținutul reprezintă cea ce se află în interiorul elementului, reprectiv alte elemente (de ex un tag &#60p&#62&#60/p&#62 în interorul unui div) sau text (în interiorul tag-urilor &#60p&#62&#60/p&#62 sau &#60h1&#62&#60/h1&#62 ).</li></ol>",
				"p4":"<b>Notă</b>: toate distanțele se măsoară de la granița unui element până la marginea următorului element. În acest sens, padding-ul, fiind în interiorul graniței face parte din element și contribuie la înălțimea acestuia, dar proprietatea “margin” nu.",
				"p5":"Așadar proprietatea “margin” determină distanța dintre un element și elementele sale vecine, iar proprietatea “padding” determină căt spațiu să rămână între granița unui element și conținutul său. Hai să le testăm",
				"p6":"<b>Notă</b>: Proprietățiile <i>margin</i> și <i>padding</i> modifică distanța elementelor față de ganițe din toate cele patru părți (sus, jos stânga dreapta). Dacă dorești să modifici doar o anumită latură a elementelor poți folosi proprietăți precum margin-top su padding-left. Laturile posibile sunt:",
				"p7":"<ol><li>left -stânga-</li><li>right -dreapta-</li><li>top -sus-</li><li>bottom -jos-</li></ol>"
			},
			"HTML": "",
			"Hint":"Example Hint",
			"CSS":"",
			"Validator":"Pass(htmlDocData)",
			"Instructions": {
				"i1":"Dacă ai înțeles apasă pe butonul execută pentru a merge mai departe"
			},
			"Next Lesson":"css-span_div_class_id:granite_margini_si_umpluturi_-_aprofundare"
		},
		"css-span_div_class_id:granite_margini_si_umpluturi_-_aprofundare": {
			"Title": "Granițe, margini și umpluturi - aprofundare",
			"Text": {
				"p1":"După cum poți vedea, proprietățiile “border”, “margin” și “padding” sunt simetrice, adică arată la fel și au aceași valoare și în stânga și în dreapta și sus și jos. Hai să vedem cum putem modifica acest comportament.",
				"p2":"Pentru a specifica faptul că dorim să aplicăm un anumit stil doar unei anumite părți ale alementului folosim cuvintele:",
				"p3":"<ol><li>left -stânga-</li><li>right -dreapta-</li><li>top -sus-</li><li>bottom -jos-</li></ol>",
				"p4":"Astfel dacă dorim să să aplicăm o anumită margine doar părții de sus a elementului vom folosi proprietatea “margin-top” (neaparat cu “-” între ele și în ordine asta). Dacă dorim ca doar gramița din partea dreaptă a elementului arate într-un anumit fel vom folosi proprietatea “border-style-right”.",
				"p5":"Hai să încercăm și noi să specificăm margini și padding în acest mod."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"index.css\"/>\n\t\t<title>CSS</title>\n\t</head>\n\n\t<body>\n\n\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"div{\n\n}",
			"Validator":"CheckLessonMarginsAndPaddingTwo(htmlDocData)",
			"Instructions": {
				"i1":"Adaugă în editor trei div-uri cu câte un paragraf în fiecare. În CSS dă culorii de fundal a div-urilor valoarea “orange”",
				"i2":"Adaugă div-urilor o margine inferioară de 60 de pixeli. Remarcă felul în care div-urile sau distanțat unul de altul pe verticală",
				"i3":"Adaugă div-urilor un padding de 2.5% în partea stângă. Remarcă cum acum există un spațiu între granița div-ului și textul din interiorul său",
				"i4":"Dacă vrei să vezi cum arată modelul cutie poți face click dreapta pe elementul pe care dorești să-l verifici și să alegi opțiunea ”inspect”/”inspectează”"
			},
			"Next Lesson":"css-span_div_class_id:Tipuri de display"
		},
		"css-span_div_class_id:Tipuri de display": {
			"Title": "Tipuri de display",
			"Text": {
				"p1":"Acum că am rezolvat cu înălțimea, lățimea, marginile, padding-ul și unitățiile de măsură hai să ne uităm un pic la felurile de afișaj existente în CSS. Pentru a schimba tipul de afișaj folosim proprietatea display. Acesta poate lua mai multe valori:",
				"p2":"<ol><li><b>block (bloc)</b>: Proprietatea esențială a elementelor block este faptul că stau singure pe rândul lor. Adică dacă avem două div-uri cu “display:block” ele se vor așeza unul sub altul, nu unul lângă altul, chiar dacă teoretic ar avea loc unul lângă altul</li><li><b>inline-block (bloc aliniat/în linie)</b> : Aceste elemente se așează unul lângă altul dacă au suficent spațiu.</li><li><b>inline (aliniat/în linie)</b>: La fel ca și elementele <i>display:inline-block</i> ele se așează unul lângă altul dacă au suficent loc. Diferența între inline și inline-block este fapltul că elementelor inline nu le poate fi editată înălțimea și lățimea în CSS (adică proprietățiile <i>width</i> și <i>height</i> nu au efect asupra lor).</li><li><b>none (niciuna/niciunul)</b>: elementul nu apare pe pagină, este ca și când respectivul element nu ar exista pe pagină</li></ol>",
				"p3":"<b>Notă</b>:Atât elementele <i>inline</i> cât și cele <i>inline-block</i> preiau implicit dimensiunile(înălțimea și lățimea) elementelor din interiorul lor. Elementele <i>block</i> preiau înălțimea elementelor din interiorul lor și lățimea maximă pe care o pot avea.",
				"p4":"<b>Notă</b>:Div-urile au implicit valoarea <i>display:block</i>, iar span-urile au implicit valoarea <i>display:inline</i>. Aceasta este diferența între cele două tag-uri.",
				"p5":"O altă proprietate asemănătoare cu display este “visibility” -vizibiliatate-, care poate prelua valorile “visible” (vizibil, valoarea implicită pentru toate elementele) sau “hidden” (ascuns).",
				"p6":"<b>Notă</b>:Diferența între “display:none” și “visibility:hidden” este faptul că în cazul “visibility:hidden” elementul este invizibil dar continuă să ocupe spațiu pe pagină, în timp ce elementele cu “display:none” sunt eliminate în întregime de pe pagină. (adică un div invizibil de 200×200 px crează pe pagină un spațiu “gol” de 200×200 px iar acelaș div dacă are “display:none” nu lasă niciun spațiu gol pe pagină).",
				"p7":"Hai să creem în editor niște exemple ca să ne fie mi ușor să ne dăm seama cum funcționează proprietățiile <i>display</i> și <i>visibility</i>"
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"index.css\"/>\n\t\t<title>CSS</title>\n\t</head>\n\n\t<body>\n\t\t<!--Block-->\n\t\t<div class=\"block\"> \n\t\t\tExemplu:block\n\t\t</div>\n\t\t<div class=\"block\">\n\t\t\tExemplu:block\n\t\t</div>\n\n\t\t<!--Hidden-->\n\t\t<div class=\"hidden\">\n\t\t\tExemplu:hidden\n\t\t</div>\n\t\t<div class=\"hidden\">\n\t\t\tExemplu:hidden\n\t\t</div>\n\n\t\t<!--Inline-Block-->\n\t\t<div class=\"inline-block\">\n\t\t\tExemplu:inline-block\n\t\t</div>\n\t\t<div class=\"inline-block\">\n\t\t\tExemplu:inline-block\n\t\t</div>\n\n\t\t<!--None-->\n\t\t<div class=\"none\">\n\t\t\tExemplu:none\n\t\t</div>\n\t\t<div class=\"none\">\n\t\t\tExemplu:none\n\t\t</div>\n\n\t\t<!--Inline-->\n\t\t<div class=\"inline\">\n\t\t\tExemplu:inline\n\t\t</div>\n\t\t<div class=\"inline\">\n\t\t\tExemplu:inline\n\t\t</div>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"div{\n\twidth: 45vw;\n\theight: 10vh;\n\tbackground-color: orange;\n\tmargin: 10px;\n}\n\n.block{\n\tdisplay:block;\n}",
			"Validator":"CheckLessonDisplayTypes(htmlDocData)",
			"Instructions": {
				"i1":"Adaugă în editor trei div-uri cu câte un paragraf în fiecare. În CSS dă culorii de fundal a div-urilor valoarea “orange”",
				"i2":"Adaugă div-urilor o margine inferioară de 60 de pixeli. Remarcă felul în care div-urile sau distanțat unul de altul pe verticală",
				"i3":"Adaugă div-urilor un padding de 2.5% în partea stângă. Remarcă cum acum există un spațiu între granița div-ului și textul din interiorul său",
				"i4":"Dacă vrei să vezi cum arată modelul cutie poți face click dreapta pe elementul pe care dorești să-l verifici și să alegi opțiunea ”inspect”/”inspectează”"
			},
			"Next Lesson":"css-span_div_class_id:Selectori"
		},
		"css-span_div_class_id:Selectori": {
			"Title": "Selectori",
			"Text": {
				"p1":"Acum că știm să modificăm o mulțime de proprietăți legate de div-uri hai să învățăm și niște selectori noi",
				"p2":"Până acum am învățat cum să folosim selectori simpli precum “div” sau “.numeleClassei”. Ce facem însă dacă vrem să selectăm separat diferite elemente cu aceași clasă. Hai să alegem un exemplu concret. În exemplul din editor avem un div și un span, ambele cu clasa “rosu”. Noi ne dorim ca fundalul div-ului cu această clasă să fie roșu, dar textul să rămână neschimbat iar in interiorul span-ului vrem ca textul să fie roșu, dar fundalul neschimbat.",
				"p3":"Pentru a selecta un anumit element ce prezintă o anumită clasă putem folosi următoarea structură:",
				"p4":"<div class='codeSnipped'>elementul.clasa{<br><br> &#160 &#160 &#160/* CSS-ul aici */<br><br>}</div>",
				"p5":"De exemplu pentru a selecta div-urile cu clasa “rosu” (și doar div-urile nu și celelalte elemente cu această clasă) folosim selectorul “div.rosu”.",
				"p6":"<b>Atenție</b>: Între numele elementului și denumirea clasei <b>nu</b> se lasă spațiu liber.",
				"p7":"Hai să încercăm și noi."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t\t<meta charset=\"utf-8\"/>\n\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"index.css\"/>\n\t\t\t<title>CSS</title>\n\t</head>\n\n\t<body>\n\t\t<div class=\"rosu\">\n\t\t\t<p>Cuvinte <span>portivite</span></p>\n\t\t</div>\n\n\t\t<div>\n\t\t\t<p>Flori de <span class=\"rosu\">mucigai</span></p>\n\t\t</div>\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":" ",
			"Validator":"CheckLessonCssSelectorsOne(htmlDocData)",
			"Instructions": {
				"i1":"Selectează în CSS div-urile cu clasa “rosu” și schimbă-le culoarea de fundat în culoarea roșie, lasă textul în sine neschimbat",
				"i2":"Selectează și span-urile cu această clasă și schimbă culoarea textului în roșu, lasă fundalul în sine neschimbat"
			},
			"Next Lesson":"css-span_div_class_id:Selectori partea a doua"
		},
		"css-span_div_class_id:Selectori partea a doua": {
			"Title": "Selectori partea a doua",
			"Text": {
				"p1":"Foarte bine, hai acum să vedem cum putem face să selectăm elementele din interiorul altor elemente.",
				"p2":"De exemplu hai să ne imaginăm că vrem să selectăm doar listele ordonate (&#60ol&#62&#60/ol&#62) din interiorul unui div cu clasa “liste_importante”. Primul lucru pe care trebuie să-l facem este să selectăm div-ul cu clasa respectivă, apoi trebuie să spunem CSS-ului că trebuie să aleagă listele din interiorul lui. Sintaxa arată în felul următor:",
				"p3":"<div class='codeSnipped'>&#60!--HTML--&#62<br><br>&#60div class='liste_importante'&#62<br><br> &#160 &#160 &#160&#60ol&#62<br> &#160 &#160 &#160 &#160 &#160 &#160&#60li&#62Primul element al listei&#60/li&#62<br> &#160 &#160 &#160 &#160 &#160 &#160&#60li&#62Al doilea element al listei&#60/li&#62<br> &#160 &#160 &#160 &#160 &#160 &#160&#60li&#62Al treilea element al listei&#60/li&#62<br> &#160 &#160 &#160 &#60/ol&#62<br><br>&#60/div&#62<br><br>/* CSS */<br><br>div.liste_importante ol{<br>&#160 &#160 &#160 font-size:28px;<br>}</div>",
				"p4":"Remarcă faptul că prima oară se trece elemetul părinte, iar apoi elementul din interiorul său, iar între cele două se lasă un spațiu liber."
			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t\t<meta charset=\"utf-8\"/>\n\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"index.css\"/>\n\t\t\t<title>CSS</title>\n\t</head>\n\n\t<body>\n\n\t\t<div class=\"elemente_importante\">\n\t\t\t<h3>Ce îmi doresc de la academia de cod</h3>\n\t\t\t<p>Vreau să învăț să creez pagini web superbe</p>\n\t\t</div>\n\n\t\t<div>\n\t\t\t<h3>Alte dorinte</h3>\n\t\t\t<p>De asemenea vreau și să mănânc mere</p>\n\t\t</div>\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"",
			"Validator":"CheckLessonCssSelectorsTwo(htmlDocData)",
			"Instructions": {
				"i1":"În CSS schimbă culoarea paragrafelor(și doar a paragrafelor) din interiorul tag-ului div cu clasa “elemente_importante” în ce altă culoare vrei (nu negru)",
				"i2":"În CSS schimbă textul elementului h3 din interiorul tag-ului div cu clasa “elemente_importante” astfel încât să fie înclinat",
				"i3":"Lasă celelalte secțiuni neschimbate"
			},
			"Next Lesson":"css-span_div_class_id:Selectori partea a treia"
		},
		"css-span_div_class_id:Selectori partea a treia": {
			"Title": "Selectori partea a treia",
			"Text": {
				"p1":"Ultima lecție despre selectori (pentru moment). Hai să vedem cum putem să selectăm anumite elemente în funcție de atributele lor. De exemplu cum putem selecta tag-urile <a href=\"\"></a> care trimit spre o anumită pagină.",
				"p2":"Pentru a selecta tag-urile ce prezintă anumite atribute putem folosi sintaxa tag[atribut= \"valoare\"]. De exemplu:",
				"p3":"<div class='codeSnipped'>a[href=\"http://youtube.com\"]{<br> &#160 &#160 &#160/*CSS-ul aici*/<br>}</div>",
				"p4":"Exemplul de mai sus va selecta toate elementele <a href=“\"></a> care duc spre pagina \"http://youtube.com\".",
				"p5":"<b>Notă</b>: între tag și parantezele pătrate <b>nu</b> se lasă spațiu. De asemenea valoarea atributului trebuie scrisă între paranteze.",
				"p6":"Această structură este foarte utilă dacă stim exact ce valoare va avea atributul pe care dorim să-l alegem. Ce se întâmplă însă dacă nu știm exact unde să ducă pagina? Poate că noi vrem ca link-urile de youtube să arate într-un anumit fel indiferent dacă duc spre \"https://www.youtube.com/watch?v=WElvEZj0Ltw\", spre \"https://www.youtube.com/watch?v=xtIr8k4eC7o\" sau spre orice altă pagină de pe youtube.",
				"p7":"Pentru a realiza asta folosim sintaxa [href*=\"youtube\"] (remarcă simbolul \"*\" din fața semnului \"=\"), care se traduce în felul următor: \"selecteză toate elementele care conțin în interiorul valorii href setul de litere 'youtube'\". Dacă dorim să selectăm toate link-urile care duc către orice articol de pe \"zf.ro\" vom folosi selectorul a[href*=\"zf.ro\"]. Selectorul a[href*=\"e\"] va selecta toate link-urile care conțin litera \"e\".",
				"p8":"Hai să vedem cum funcționează acești selectori pe o pagină făcută de noi."

			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t\t<meta charset=\"utf-8\"/>\n\t\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"index.css\"/>\n\t\t\t<title>CSS</title>\n\t</head>\n\n\t<body>\n\t\t<p>Pt o melodie faina click <a href=\"https://www.youtube.com/watch?v=xtIr8k4eC7o\">aici</a></p>\n\t\t<p><a href=\"http://arstechnica.com/\">Ars Technica</a> e un site de tehnologie</p>\n\t\t<p><a href=\"http://alexandrupetru.me/\">Acesta</a> e site-ul unuia dintre fondatorii academiei de cod</p>\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"",
			"Validator":"CheckLessonCssSelectorsThree(htmlDocData)",
			"Instructions": {
				"i1":"Folosește selectorul a[href*=\"youtube\"] pentru a selecta link-urile către youtube. Colorează-le roșu (red)",
				"i2":"Folosește un selector asemănător pentru a selecta link-urile ce coțin în adresă \"arstechnica.com\". Colorează-le pe acestea verde(green)",
				"i3":"Să nu modifici culoarea textului altor link-uri"
			},
			"Next Lesson":"css-exercitii_cu_div-uri:introducere"
		},
		"css-exercitii_cu_div-uri:introducere": {
			"Title": "Primul proiect",
			"Text": {
				"p1":"Felicitări, ai atins un nou nivel în evoluția ta ca dezvoltator web.",
				"p2":"Hai să folosim cunoștiințele acumulate de tine, pentru a construi împreună un site pentru business-ul tău. Vom folosi cea ce ai învățat deja și îți vom demonsta cât de multe pot fi create cu doar aceste cunoștiințe.",
				"p3":"Inspiră adânc, bucură-te de realizarea ta și când te simți pregăti hai să începem."

			},
			"HTML": "<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\"/>\n\n\t</head>\n\n\n\t<body>\n\n\n\t</body>\n</html>",
			"Hint":"Example Hint",
			"CSS":"",
			"Validator":"CheckLessonDivExercisesOne(htmlDocData)",
			"Instructions": {
				"i1":"În tag-ul head dă paginii tale ca titlu numele pe care vrei să-l dai firmei tale.",
				"i2":"Crează un link către CSS",
				"i3":"În body adaugă un tag h1 ce să includă numele firmei și o scurtă descriere. De exemplu: ”Amazon: magazinul cu de toate”. Centrează scrisul cu ajutorul proprietății ”text-align”. În rest poți stiliza textul cum vrei."
			},
			"Next Lesson":"css-exercitii_cu_div-uri:Coloane"
		},
		"css-exercitii_cu_div-uri:Coloane": {
			"Title": "Coloane",
			"Text": {
				"p1":"Ok, acum că am pus bazele paginii noastre, hai să vedem ce putem face cu noile noastre cunoștiințe leagte de div-uri. ",
				"p2":"Unul din desig-nurile foarte populare în prezent este cel bazat pe coloane. Câteva exemple de site-uri care folosesc aspect sunt facebook, youtube, twitter, majoritatea paginilor de știri etc. Și noi vom implementa acest design.",
				"p3":"Pentru a implementa acest design pe pagina noastră trebuie în primul rând să așezâm trei div-uri pe pagina noastră, urmând ca fiecare să reprezinte o coloană. Pentru a le diferenția le vom adăuga clasele ”coloana-stanga”, ”coloana-centru” și ”coloana-dreapta”,<b> în ordinea asta</b>. Pentru a le putea vedea adaugă în fiecare câte un text."

			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"CheckLessonDivExercisesTwo(htmlDocData)",
			"Instructions": {
				"i1":"Adaugă cele trei div-uri pe pagina ta. Atribuie fiecăreia clasa din textul lecției.",
				"i2":"Schimbă tip-ul de display al elementelor ce conțin în numele clasei cuvântul coloană în inline-block (în caz că ai uitat selectorul pentru asta este div[class*='coloana'], simbolul '*=' însemnând 'oricare conține', adică orice div ce are o clasă ce conține setul de litere 'coloană')",
				"i3":"Apasă pe butonul execută pentru a vedea rezultatul"
			},
			"Next Lesson":"css-exercitii_cu_div-uri:Aranjare"
		},
		"css-exercitii_cu_div-uri:Aranjare": {
			"Title": "Aranjare",
			"Text": {
				"p1":"Bine, acum avem trei coloane, dar pagina noastră încă nu arată bine de loc. Hai să aranjăm coloanele astfel încât ele să ocupe toată lățimea paginii, ca apoi să bagăm celelalte elemente în interiorul acelor trei coloane.",
				"p2":"Pentru a face vom seta lățimea celor două coloane laterale la 15% și lățimea coloanei centrale la 65%. Avem grija ca suma lățimiilor să fie mai mică de 100% deoarece, în urma unor mici erori(erori de calcul/de afișaj, nu erori în html-ul scris de noi) se poate întâmpla ca rezultatul final să fie mai mare decât pagina și să iasă din pagină sau să rearanjeze coloanele. Pentru a evita asta vom avea grijă ca suma lățimiilor coloanelor să fie de sub 100%.",
				"p3":"De asemenea, ca să putem vedea mai bine coloanele le vom colora pe cele două laterale galben și pe cea centrală roșu.",
				"p4":"Remarcă faptul că CSS-ul pentru cele două coloane laterale este identic. Dacă dorim să selectăm mai multe elemente simultan le putem înșira în CSS cu virgulă între ele, de exemplu:",
				"p5":"<div class=\"codeSnipped\">.element1, .element2, #test{<br> &#160 &#160 &#160/* CSS aici */<br>}</div>",
				"p6":"Exemplul de mai sus selectează elementul cu clasa 'element1', elementul cu clasa 'element2',elementul cu id-ul'test'simultan. CSS-ul din interiorul parantezelor acolade se va aplica așadar asupra tuturor celor trei elemente."

			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"CheckLessonDivExercisesThree(htmlDocData)",
			"Instructions": {
				"i1":"Selectează cele două coloane laterale, cea cu clasa 'coloana-stanga' și cea cu clasa 'coloana-dreapta' simltan și setează-le lățimea (width) la 15% și ce culoare de fundal (background-color) dorești",
				"i2":"Selectează coloana din mijloc, cea cu clasa 'coloana-centru' și setează-i lățimea la 68% și schimbă-i culoarea de fundal în altceva decât culoarea coloanelor laterale"
			},
			"Next Lesson":"css-exercitii_cu_div-uri:Continut"
		},
		"css-exercitii_cu_div-uri:Continut": {
			"Title": "Conținut",
			"Text": {
				"p1":"Bravo, tocmai ai creat primul tău site cu coloane. Hai să adăugăm acum și niște conținut pe pagina ta.",
				"p2":"Vom împărți conținutul de pe pagina ta în mai multe secțiuni. Fiecare secțiune va fi încadrată într-un div cu clasa ”secțiune” și va conține câte un titlu (de tip <b>&#60h2&#62&#60/h2&#62</b>) și minim un paragraf.",
				"p3":"Un exemplu de secțiune ar fi următorul:",
				"p4":"<div class=\"codeSnipped\">&#60div class=\"sectiune\"&#62<br>&#160 &#160 &#160 &#60h2&#62Exemplu titlu&#60/h2&#62<br>&#160 &#160 &#160 &#60p&#62Exemplu paragraf&#60/p&#62<br>&#160 &#160 &#160 &#60p&#62Exemplu paragraf 2&#60/p&#62<br>&#160 &#160 &#160 &#60p&#62Exemplu paragraf 3&#60/p&#62 <br>&#60/div&#62</div>",
				"p5":"Hai să adăugăm niște conținut pe pagina noastră."

			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"CheckLessonDivExercisesFour(htmlDocData)",
			"Instructions": {
				"i1":"În coloana din mijloc (cea cu clasa ”coloana-centru”) adaugă minim trei secțiuni ca-n exemplul de mai sus. Poți adăuga ce text dorești în secțiuni. . Poți crea de exemplu o secțiune cu titlul ”Despre noi” o secțiune cu titlul ”Pentru clienți” și o secțiune cu titlul ”Pentru colaboratori”",
				"i2":"Nu-ți fă griji dacă cele două coloane laterale fug jos, vom rezolva această problemă lectia următoare"
			},
			"Next Lesson":"css-exercitii_cu_div-uri:Aliniere"
		},
		"css-exercitii_cu_div-uri:Aliniere": {
			"Title": "Aliniere",
			"Text": {
				"p1":"Ok, acum oricine intră pe pagina nostră poate vedea câte ceva despre firma pe care dorim să o punem pe picioare/pentru care lucrăm. Dar din nou ceva nu arată bine, coloanele noastre nu sunt pe acelaș nivel. Pentru a pune elemente pe acelaș nivel trebuie să specificăm HTML-ului cum dorim să le aliniem.",
				"p2":"Pentru a spune HTML-ului cum să alinieze elementele folosim proprietatea ”vertical-align” -aliniere verticală-. Aceasa poate lua o mulțime de valori, dar pentru moment vom descrie doar 3 dintre aceste valori, <b>top</b>(sus), <b>middle</b>(mijloc) și <b>bottom</b>(jos). \"Top\" alinează elementele astfel încât partea lor de sus să fie pe acelaș nivel, \"center\" alinează elementele astfel încât mijlocul lor (pe verticală) să fie pe acelaș nivel iar \"bottom\" le alinează astfel încât partea de jos a elementelor să fie pe acelaș nivel."

			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"CheckLessonDivExercisesFive(htmlDocData)",
			"Instructions": {
				"i1":"Schimbă alinierea verticală a coloanelor tale astfel încăt ele să fie aliniate după partea lor de sus. Folosește pentru asta selectorul div[class*='coloana'] care selectează toate div-urile ce conțin în numele clasei cuvântul ”coloana” și pe care l-ai mai folosit deja o dată.",
				"i2":"Un alt element care este neplăcut d.p.d.v. estetic pe pagina nostră este faptul că tetul începe chiar din dreaptra div-ului în care se află. Pentru a evita asta adaugă un padding de 20 pixeli sec'iuniilor tale. În caz că ai uitat paddingul reprezintă spațiul dintre un element și conținutul său, în cazul nostru între secțiuni( divurile cu clasa \"sectiune\") și tag-urile <p></p> respectiv <h2></h2>"
			},
			"Next Lesson":"css-exercitii_cu_div-uri:Colturi rotunjite"
		},
		"css-exercitii_cu_div-uri:Colturi rotunjite": {
			"Title": "Colțuri rotunjite",
			"Text": {
				"p1":"Ok, acum pagina noastră începe să arate decent (nu-ți fă griji dacă ai impresia că ar mai fi multe de îmbunătățit, vei avea ocazia să modifici ce și cum vrei când terminăm lecțiile, dr pentru moment dorim modar să-ți prezentăm ce se poate face cu HTML și CSS. Noi îți oferim uneltele, dar tu vei fi arhitectul).",
				"p2":"Totuși, parcă nu se prea vede diferența între secțiunile de pe pagina noastră. Hai să le diferențiem mai bine din punct de vedere vizual. O idee ar fi să le facem granița vizibilă, dar de data asta nu vom alege această cale. Cea ce vom face va fi să schibâmbăm culoarea de fundal a secțiunilor, să le adăugăm o mică margine ca să se vedă unde începe una și unde se ermină cealaltă, iar apoi, vom rotunji colțurile secțiunilor pentru a le face mai plăcute din punct de vedere vizual.",
				"p3":"Pentru a rotunji colțurile vom folosi proprietatea <b>border-radius</b> -raza graniței-. Valoarea acesteia se specifică, de regulă, în pixeli. Aceasă proprietate rotunjește colțurile ca și când ele ar face parte dintr-un cerc cu raza specificată de tine ca valoare a proprietății border-radius (în ”Ajutor” ai o poză, iar dacă nu înțelegi detaliile tehnice nu-ți fă griji, nu sunt necesare).",
				"p4":"Așadar, hai să vedem cum arată secțiuniile noastre după ce le aranjăm un pic."

			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"CheckLessonDivExercisesSix(htmlDocData)",
			"Instructions": {
				"i1":"Schimbă culoarea de fundal a secțiuniilor (adică a div-urilor cu clasa sectiune) în alta față de culoarea coloanei din centru",
				"i2":"Rotunjește colțurile secțiuniilor tale setându-le proprietatea border-radius la 10px",
				"i3":"Adaugă secțiunilor o margine de 10px;"
			},
			"Next Lesson":"css-exercitii_cu_div-uri:Pseudo-selectori"
		},
		"css-exercitii_cu_div-uri:Pseudo-selectori": {
			"Title": "Pseudo-selectori",
			"Text": {
				"p1":"Din nou am învățat ceva în plus despre cum putem aranja și stiliza div-urile nostre. Nu uita că dacă vreodată simți nevoia să-ți reîmprospătezi memria asupra multitudinii de tag-uri și proprietăți pe care le-ai învățat deva poți folosi tot timpul glosarul nostru.",
				"p2":"În aceasă lecție vom aborda un subiect nou și anume pseudo-selectorii. Aceștia sunt, după cum spune și numele niște selectori falși, sau mai bine spus niște selectori situaționali. Ei se numesc așa deoarece ele selectează doar elementele într-o anumită stare și sunt obligatoriu legați de un selector real.",
				"p3":"Structura unui pseudoselector este următoarea:",
				"p4":"<div class='codeSnipped'>  selector:pseudo-selector{<br> &#160 &#160 &#160/*CSS aici */<br>}</div>",
				"p5":"Remarcă faptul că între selector și pseudo-selector se pune simbolul ”:” și că nu se lasă spațiu nici înainte nici după acel simbol.",
				"p6":"Exemplu de pseudo-selector pe care îl vom învăța lecția aceasta este <b>hover</b> (planează/ se află peste). Acesta selectează elementele peste care se află/peste care planează cursorul. Adică dacă am în CSS structura:",
				"p7":"<div class='codeSnipped'>  p:hover{<br> &#160 &#160 &#160font-size:20px;<br>}</div>",
				"p8":"acesta va face ca paragrafele peste care țin mouse-ul să aibe mărmea fontului de 20px. Celelalte paragrafe (cele peste care nu țin cursorul) nu vor fi afectate. De asemenea odată ce îndepărtezi cursorul pe de paragraful în cauză el va revenii la normal."

			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"CheckLessonDivExercisesSeven(htmlDocData)",
			"Instructions": {
				"i1":"Adaugă pseudo-selectorul ”.sectiune:hover” în fișierul CSS pentru a selecta secțiuniile peste care se află cursorul.",
				"i2":"Schimbă culoarea de fundal secțiuniilor selectate cu ajutorul pseudoselectorului ”.sectiune:hover”(în general se folosește o altă nuanță a culorii elementului selectat)"
			},
			"Next Lesson":"css-exercitii_cu_div-uri:Lista de link-uri"
		},
		"css-exercitii_cu_div-uri:Lista de link-uri": {
			"Title": "Lista de link-uri",
			"Text": {
				"p1":"Wow, chiar ai adăugat un efect tare pe pagina ta. Sunt sigur că te poți gândi și la alte moduri de a folosi pseudo-selectorul ”:hover” pentru a crea efecte interesante pe pagina ta. Dar acum ne-am jucat destul cu conținutul paginii noastre, hai să mai adăugăm ceva nou.",
				"p2":"Vom folosi div-ul din dreapta(cum te uiți la ecran) pentru a adăuga o listă cu numele angajțiilor noștri. Lista va fi formată in link-uri de pe care utilizaorul va putea trimite direct mail-uri respectivilor angajați. De asemenea com adăuga în div-ul din stânga o listă care ne va spune ce teme abordăm pe pagina noastră (adică despre ce e vorba însecțiuniile de pe pagina noastră).",
				"p3":"Lista cu angajații va fi o listă neordonată, iar lista cu temele abordate de secțiuniile de pe pagina noastră va fi una ordonată. În caz că ai uitat cum se crează liste te poți uita în pătratul ajutător.",
				"p4":"Nu uita că înconjori numele anajațiilor cu tag-ul &#60a&#62&#60/a&#62 pentru a le transforma în link-uri, link-uri pe care le vom lega mai târziu de adresa de email a respectivilor angajați."

			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"CheckLessonDivExercisesEight(htmlDocData)",
			"Instructions": {
				"i1":"În coloana din stânga(cum te uiți la ecran) crează o listă ordonată ce să conțină titlurile secțiuniilor de pe pagina ta",
				"i2":"Desupra listei cu secțiuniile, dar tot în divul cu clasa ”coloana-stanga” adaugă un <h3></h3> și dă un titlu listei tale, ceva de genul ”Pe pagina noastră puteți găsi informații despre:” sau orice altceva dorești tu.",
				"i3":"În coloana din dreapta adaugă o listă neordonată ce să conțină persoanele de contact ale firmei tale. Nu uita să înconjori numee fiecătrei persoane cu un tag <a></a>. Alege și listei aesteia un titlu și trece-l într-un <h3></h3>.",
				"i4":"Poți stiliza listele și tag-urilie <h3></h3> și listele în CSS cum dorești tu. Ai grijă ca fiecare listă să conțină minim două elemente"
			},
			"Next Lesson":"css-exercitii_cu_div-uri:Mailto"
		},
		"css-exercitii_cu_div-uri:Mailto": {
			"Title": "Mailto",
			"Text": {
				"p1":"Ok, așa cum ți-am promis, te vom învăța cum să permiți uitilizatrilor să trimită mail-uri persoanelor tale de contact, pur și simplu făcând click pe numele lor.",
				"p2":"După cum poți vedea, numele persoanelor tale de contact este înconjurat de un tag &#60a&#62&#60/a&#62, dar atributul href este în continuare gol. Până acum am dat atributului href ca valoare o pagină web, de exemplu ”http://acadmiadecod.ro” sau ”http://youtube.com”. Acum vrem însă să dăm atributului href ca valoare o adresă de email, astfel încât atunci când cineva face click pe link-ul respectiv, să se deschidă un serviciu de mail (de ex Outlook) care să aibă deja completată adresa de mail din link la rubrica adresant.",
				"p3":"Pentru a face asta folosim funcția ”mailto” (mail către). De exemplu structura",
				"p4":"<div class='codeSnipped'>  &#60a href=\"mailto:stephan@adc.ro\"&#62Ariesanu Stephan&#60/a&#62</div>",
				"p5":"va crea pe pagină un link care, când este apăsat, va deschide un serviciu de mail(Outlook) și va completa rubrica “către(to)” a unui mail nou cu adresa ”stephan@adc.ro”. Remarcă faptul că între cuvântul ”mailto” și adresa de mail în sine se află simbolul ”:” și că lângă acesta, atât în stânga cât și în drepata nu se află spații libere.",
				"p6":"Încearcă și tu!"

			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"CheckLessonDivExercisesNine(htmlDocData)",
			"Instructions": {
				"i1":"Adaugă tuturor link-urilor cu persoanele de contact câte o adresă de mail. Folosește pentru asta funția mailto. Dacă vrei poți folosi adresele din lista ”test1@adc.ro”, ”test2@adc.ro”, ”test3@adc.ro”, ”test4@adc.ro”, ”test5@adc.ro”."
			},
			"Next Lesson":"css-exercitii_cu_div-uri:Mailto si titlu"
		},
		"css-exercitii_cu_div-uri:Mailto si titlu": {
			"Title": "Mailto și titlu",
			"Text": {
				"p1":"Foarte bine, adcă cineva fa face acum click pe unul numele din lista persoanelor de contact se va deschide un serviciu de mail precompletat cu adresa destinatarului. Acum trebuie însă să ne întrebăm ce facem dacă utilizatorul respectiv nu are niciun serviciu de mail instalat pe calculator. Ideal ar fi să poată vedea cumva adresa de mail pentru contact.",
				"p2":"Poate ai mai văzut pe net că, atunci când ți cursorul peste anumite elemente apare o cutiuță cu un text ca-n imaginea de mai jos.",
				"p3":"Imagine",
				"p4":"Pentru a adăuga această căsuță vom folosi atributul ”title” și îi vom da ca valoare textul pe care îl dorim scris în căsuță. Adică dacă vrem ca-n respectiva căsuță să apară text-ul ”așa se folosește atributul title” vom folosi atributul title=”text”.",
				"p5":"Atributul ”title” pote fi adăugat oricărui tag. De exemlu poti folosi atributul ”title” împreună cu tag-ul span pentru a explica anumite cuvinte, ca-n exemplul de mai jos.",
				"p6":"<div class='codeSnipped'>   <p> Bine ați venit pe pagina &#60span title=\"academia de cod - Mediu de invțare gratuit\"&#62 adc &#60/span&#62</div>"

			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"CheckLessonDivExercisesTen(htmlDocData)",
			"Instructions": {
				"i1":"Adaugă link-urilor tale câte un titlu care să conțină adresa de mail a persoanelor de contact. De ex title=”test1@adc.com”"
			},
			"Next Lesson":"css-exercitii_cu_div-uri:Libertate"
		},
		"css-exercitii_cu_div-uri:Libertate": {
			"Title": "Libertate",
			"Text": {
				"p1":"E momentul să celebrăm, ai terminat prima serie de HTML și CSS. Urmează să învățăm un pic de JavaScript, un limbaj de programare care adaugă funcționalitate paginilor (vom explica în cadrul cursurilor ce înseamnă asta mai exact).",
				"p2":"Până atunci însă ești liber să faci ce vrei la pagina aceasta în continuare. Poți adăuga elemente, scoate elemente, schimba culori, forme mărimi etc. Singurul lucru de care trebuie să ți cont este faptul că site-ul pe care îl faci se presupune că e pagina de prezentare a unui buissness. Restul e la latitudinea ta, iar cu cât ești mai cretiv cu atât mai bine.",
				"p3":"Distracție placută!"

			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"Pass(htmlDocData)",
			"Instructions": {
				"i1":"Editează pagina cum dorești"
			},
			"Next Lesson":"css-exercitii_cu_div-uri:Portofoliu"
		},
		"css-exercitii_cu_div-uri:Portofoliu": {
			"Title": "Portofoliu",
			"Text": {
				"p1":"Felicitări, ai pus pe picioare un site care arată chiar foarte bine. Acum e momentul să le arăți și altora ce poți face. În [locație] ai un buton cu o carte. Când pui cursorul peste el scrie ”Portofoliu” (atributul ”title” adăugat butonului face asta).",
				"p2":"Academia de cod este alcătuită din trei componente, mediul de învățare, mediul de creație și mediul social. Acum te afli în mediul de învățare, aici se află și toate cursurile noastre.",
				"p3":"Mediul de creație este locul în care ești liber să scri ce cod vrei tu, în orice limbaj. După ce creezi ceva poți să-ți salvezi creația în portofoliu și să o arății lumii întregi. Ține minte că potențiali angajatori și colaboratori se vor uita în primul rând aici pentru a te evalua.",
				"p4":"Mediul social este locul în care poți întâlni oameni noi. Îți poți invita prietenii aici, poți crea grupuri, poți vedea și posta anunțuri. Acesta este locul în care trebuie să vi pentru a-ți crea contactele și ca să găsești oameni împreună cu care să lucrezi la proiecte excepționale.",
				"p5":"Astăzi faci un pas important spre maturitate în familia AdC. După ce vei salva acest proiect în portofoliu vei putea arăta tuturor cât de deprte ai ajuns deja. Nu uita că poți oricând să te întorci la proiectele tale anterioare și să le modifici"

			},
			"HTML": "previos",
			"Hint":"Example Hint",
			"CSS":"previos",
			"Validator":"Pass(htmlDocData)",
			"Instructions": {
				"i1":"Dacă dorești salvează-ți proiectul în portofoliu.",
				"i2":"Când ești gata apasă pe butonul execută pentru a ajunge la cursurile de JavaScript"
			},
			"Next Lesson":"javascript_basic:introducere"
		},
		"javascript_basic:introducere": {
			"Title": "Introducere în JavaScript",
			"Text": {
				"p1":"Felicitări, ai ajuns deja să studiezi JavaScript (prescurtat JS). Javascript este limbajul folosit pentru a programa pagini web. A programa înseamnă a scrie un set de instrucțiuni pentru calculator. HTML și CSS de exemplu nu sunt limbaje de programare propriu-zise. Ele nu spun calculatorului ce să facă, ci doar ce elemente trebuie să fie pe pagină și cum să arate acestea. HTML și CSS sunt limbaje de markup -marcare- și respectiv styling -stilizare-.",
				"p2":"De asemenea, o altă diferență între JS și HTML sau CSS este faptul că JS-ul poate fi folosit pentru o multitudine de sarcini nu doar programare de pagini Web. De aceea noi vom începe prin a-ți preda elementele fundamentele ale JavaScript-ului, și apoi îți vom explica felul în care JavaScriptul poate fi folosit pentru creerea de pagini Web.",
				"p3":"În editor ai un prim exemplu de instrucțiune scrisă în JS. Apasă butonul execută pentru vedea exact ce face. Nu te teme dacă nu înțelegi nimic, îți vom explica în timpul lcției următoare fiecare element al instrucțiunii.",
				"p4":"<b>Notă</b>: Nu confunda <i>JavaScript</i> cu <i>Java</i>! Sunt două limbaje de programare diferite."
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"scrie(\"Bine ai venit în lumea JS\");",
			"Validator":"Pass(htmlDocData)",
			"Instructions": {
				"i1":"Apasă pe butonul execută."
			},
			"Next Lesson":"javascript_basic:Scrie"
		},
		"javascript_basic:Scrie": {
			"Title": "Primul tău rând JavaScript",
			"Text": {
				"p1":"Ok, tocmai ai văzut faptul că instrucțiunea(comanda) ”scrie()” afișează un anumit text pe ecran. Această comandă, este, în limbaj de programare o ”funcție”. Vom vorbi mai mult despre funcții în ecțiile ce urmează. Pentru moment este suficent să ști că o funcție ese o chestie care face ceva, în cazul nostru afiează un text pe ecran.",
				"p2":"Poți recunoaște funcțiile după faptul că sunt urmate de paranteze rotunde. Ce se află între parantezele rotunde se numește ”parametrul funcției”(sau parametri, pot fi mai mulți). Parametri funcției au rolul de a-i da funcției detalii despre ceea ce trebuie să facă. În cazul nostru, funcția ”scrie()” știe ca trebuie să afișeze un text pe ecran, dar nu știe ce text să afișeze. Ca să spunem funcției ce text dorim să scrie pe ecran îi dăm acel text ca parametru.",
				"p3":"De exemplu <i>scrie(\"Eu sunt parametrul\")</i> va afișa textul ”Eu sunt parametrul” pe ecran, deoarece acela este textul pe care l-am scris între parantezele rotunde.",
				"p4":"A sosit timpul să scri și tu JavaScript."
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"scrie(\"Bine ai venit în lumea JS\");\n//scrie codul tău sub rândul acesta",
			"Validator":"CheckLessonConsoleLog(htmlDocData)",
			"Instructions": {
				"i1":"În editor folosește funcția scrie() pentru a scrie ceva în consolă. Poți scrie ce text dorești, dar nu uita să-l treci între ghilimele. Să scri cuvintele ”console” sau ”log” exact așa cum le-am scris și noi",
				"i2":"Apasă pe butonul execută pentru a vedea rezultatul muncii tale."
			},
			"Next Lesson":"javascript_basic:Tipuri de date"
		},
		"javascript_basic:Tipuri de date": {
			"Title": "Tipuri de date",
			"Text": {
				"p1":"Felicitări, tocmai ai dat calculatorului prima comandă în JavaScript. După cum poți vedea, dacă treci între parantezele funcției console.log() un text între ghilimele acel text va apărea pe ecran. Dacă uiți însă de ghilimele va apărea o eroare.",
				"p2":"Ce înseamnă însă pentru JS un text între ghilimele? Ghilimelele indică browser-ului(CHROME,MOZZILA,OPERA,EXPLORER,EDGE) că are de-a face cu un string (sfoară/șir), adică un șir de caractere. String-urile sunt tipuri de date folosite pentru a stoca text.",
				"p3":"Toată informația dintr-un calculator poate fi împărțită în date(dată = o bucățică de informație ce are sens de una singură). Datele pot fi de mai multe tipuri, string-uri, char-uri, boolean-uri, numerice etc. Dacă un text este trecut între ghilimele atunci calculatorul știe că tipul de date cu care lucrează în acel caz este string, adică un text/șir de caractere."
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonDataTypesOne(htmlDocData)",
			"Instructions": {
				"i1":"Mai folosește o dată funcția scrie() și scrie-ți numele în colsolă. Nu uita de ghilimele ca să spui calculatorului că între paranteze se află un string."
			},
			"Next Lesson":"javascript_basic:Comenzi"
		},
		"javascript_basic:Comenzi": {
			"Title": "Comenzi",
			"Text": {
				"p1":"Foarte bine, acum stăpânești deja comanda scrie(). În JavaScript (și-n multe alte limbaje de programare) o comandă reprezintă pur și simplu o bucată de cod care face ceva. În cazul nostru comanda scrie() afișează un text pe ecran. Îți poți imagina că o comandă într-un limbaj de programare echivalează aproximativ cu o propoziție în vorbirea curenta. De exemplu <i>Adună 2 cu 3</i> sau <i>Scrie ”Stephan” pe ecran.</i>",
				"p2":"Pentru ca un text pe care în scriem să poată fi înțeles de cel ce-l citește, este foarte important ca cititorul să știe unde se termină o propoziție și unde începe următoarea. La fel se întâmplă și în cazul comenzilor din JS pe care le citește browser-ul.",
				"p3":"JS-ul ne oferă două metode de a separa comenzile. Putem pune semnul ”;” între comenzi sau putem trece fiecare comandă pe rând nou (cele două nu se exclud). Poți folosi ce metodă preferi, dar 99%+ din programatori trec fiecare comandă pe rând nou (și, opțional, pun și ”;” între comenzi). Noi recomandăm să folosești ambele metode ca-n exemplul de mai jos:",
				"p4":"<div class='codeSnipped'>scrie(\"text1\");<br>scrie(\"text2\");<br>scrie(\"text3\");</div>",
				"p5":"<b>Notă</b>: În multe limbaje de programare simbolul ”;” nu este opțional"
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonComads(htmlDocData)",
			"Instructions": {
				"i1":"Folosește de trei ori comanda scrie() pentru a printa trei string-uri."
			},
			"Next Lesson":"javascript_basic:Date numerice"
		},
		"javascript_basic:Date numerice": {
			"Title": "Date numerice",
			"Text": {
				"p1":"Bine, acum că înțelegi ce e un string și ce e o comandă în JS putem să trecem mai departe și să vorbim despre un alt tip de date, date numerice. Datele numerice reprezintă, după cum spune și numele, numere. Ele pot fi adunate, scăzute, înmulțite, împărțite ridicate la puteri etc. În JS, ca și în alte limbaje de programare, <b>numerele se trec fără ghilimele</b>. Privește exemplul de mai jos:",
				"p2":"<div class='codeSnipped'> 3 - număr<br>\"3\" - string/șir de caractere (un șir poate avea și un singur cracter, sau niciun caracter, mai multe despre asta mai târziu)<br>4.7 - număr<br>4,7 - in JS numerele cu zecimale se scriu cu punct ca in exemplul de mai sus.Daca le scrii cu virgula JS nu le va accepta.<br><br><br>scrie(6-2)   - va printa în consolă numărul 4<br>scrie(\"6-2\") - va printa în consolă string-ul \"6-2\" (exact așa cum e scris/fără să calculeze rezultatul)</div>",
				"p3":"Hai să facem niște exerciți cu numere."
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonDataTypesTwo(htmlDocData)",
			"Instructions": {
				"i1":"Printeză pe consolă (scrie()) o dată operația 3+5 (cu numere) și o dată strig-ul \"3+5\" pentru a te convinge și tu de diferența între numere și string-uri"
			},
			"Next Lesson":"javascript_basic:Operatii cu numere"
		},
		"javascript_basic:Operatii cu numere": {
			"Title": "Operații cu numere",
			"Text": {
				"p1":"Perfect, acum ști cum să aduni și să scazi numere. Desigur însă că există și alte operații în afară de acele două. Mai jos ai o listă cu operații posibile în JS:",
				"p2":"<div class='codeSnipped'>  5+2  ->adunare; rezultat=7<br>  5-2  ->scădere; rezultat=3<br>5*2  ->înmulțire; rezultat=10<br>5/2  ->împărțire; rezultat=2.5<br>5%2  ->modulo/rest; rezultat=1<br>------------------------------------------------<br>5++  ->increment(crește valoarea cu 1); rezultat=6<br>5--  ->decrement(scade valoarea cu 1); rezultat=4</div>",
				"p3":"Pentru moment hai să ne concentrăm asupra primelor 5 operații, vom reveni asupra ultimelor două când vom vorbi despre loop-uri.",
				"p4":"Operația %, numită și modulo, este singura care este mai complicată. Ea ne oferă restul împărțirii a două numere. Spre deosebire de matematica din școală, operația %(modulo) nu este restrănsă asupra numerelor întregi. De exemplu 5.2%3.4 dă rezultatul 1.8, deoarece 3.4 intră o dată în 5.2 și rămâne 1.8. În general operatorul % nu se folosește însă decât în cazul numerelor întregi.",
				"p5":"<b>Notă</b>:Nu există operator predefinit pentru a obține câtul unei împărțiri, vom scrie mai târziu o funcție care calculează câtul."
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonOperationsWithNumbers(htmlDocData)",
			"Instructions": {
				"i1":"Printează rezultatul a trei operații în consolă. De ex. \"scrie(2-8)\". <b>Nu</b> folosi ghilimele"
			},
			"Next Lesson":"javascript_basic:Tipul de date boolean"
		},
		"javascript_basic:Tipul de date boolean": {
			"Title": "Tipul de date boolean",
			"Text": {
				"p1":"E timpul să tecem la un alt tip de date, datele boolean( prescurtate bool). Acest tip de date poate lua doar două valori, true -adevărat- sau false -fals-. Ele sunt folosite pentru a evalua expresii ca in exemplele de mai jos:",
				"p2":"<div class='codeSnipped'>5>2    - mai mare;          rezultat=true<br>5>=2   - mai mare sau egal; rezultat=true<br>5<2    - mai mic;           rezultat=false<br>5<=2   - mai micsau egal;   rezultat=false<br>5===2  - egal;              rezultat=false<br>5!==2  - diferit;           rezultat=true</div>",
				"p3":"<b>Important</b>: tipul de date boolean se scrie fără ghilimele.",
				"p4":"<b>Notă</b>: Numele de boolean vine de la matemticeanul și logiceanul George Boole"
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonDataTypesThree(htmlDocData)",
			"Instructions": {
				"i1":"Scrie de trei ori funcția scrie() în așa fel încât ea să afișeze pe ecran trei valori bool (true sau false)"
			},
			"Next Lesson":"javascript_basic:Sudare de string-uri"
		},
		"javascript_basic:Sudare de string-uri": {
			"Title": "Sudare de string-uri",
			"Text": {
				"p1":"Ok, acum am terminat cu cele treitipuri de date de care vom vorbi inițial și cu operațiile pe care le putem face cu numere. Acum vom mai vorbi despre o operație cu string-uri, iar apoi vom începe să vorbim despre variabile, un concept vital al programării.",
				"p2":"Operația despre care vom vorbi acum este sudarea de string-uri. Când treci semnul + între două string-uri (între două texte puse între ghilimele) calculatorul le va lipi, formând un singur string.",
				"p3":"<b>Notă</b>:Calculatorul nu adaugă automat spații între string-urile inițiale",
				"p4":"Mai jos ai niște exemple de sudare de string-uri",
				"p5":"<div class='codeSnipped'>console.log(\"Cal \"+\"de \"+\"mare\")  <-va printa \"Cal de mare\" (remarcă spațiile libere din capătul cuvintelor \"Cal\" și \"de\")<br><br>console.log(\"Cal\"+\"de\"+\"mare\")  <-va printa \"Caldemare\" (remarcă lipsa spațiilor libere din capătul cuvintelor \"Cal\" și \"de\")<br><br>console.log(\"Arieșanu\"+\" \"+\"Stephan\")  <-va printa \"Arieșanu Stephan\" <br>console.log(\"Arieșanu \"+\"Stephan\")  <-va printa \"Arieșanu Stephan\" <br>console.log(\"2\"+\"2\")  <-va printa \"22\" (aici, din cauza ghilimelelor, simbolul 2 e tratat ca string nu ca număr)</div>"
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonStringMerging(htmlDocData)",
			"Instructions": {
				"i1":"Printează în consolă următoarele string-uri sudate. Fi atent la spațiile libere:",
				"i2":"“Academia”, “ ”, “de”, “ ”, “cod”",
				"i3":"“Bine ai venit pe pagina”, “ ”, “Academia de cod”",
				"i4":"“test”, “@gmail.com”",
				"i5":"“Asta”, “se”, “intampla”, “daca”, “uiti”, “de”, “spatii”"
			},
			"Next Lesson":"javascript_basic:Variabile"
		},
		"javascript_basic:Variabile": {
			"Title": "Variabile",
			"Text": {
				"p1":"Perfect, acuma că știm ce sunt datele și cum le putem manipula e timpul să ne adresăm unei alte probleme, și anume cum putem salva aceste date pentru a le folosi mai târziu. Pentru a rezolva această problemă JavaScript se folosește de variabile. Imaginează-ți variabilele ca pe niște ”cutii” ce conțin datele. Mai jos ai un exemplu pentru cum trebuie declarată o variabilă:",
				"p2":"<div class='codeSnipped'><b>var numele_utilizatorului;</b>  <i><-partea asta se numește ”declararea variabilei”, adică aici îi spui calculatorului există o variabilă numită ”numele_utilizatorului”. Cuvântul \"var\" se scrie doar atunci când declari variabila.</i><br><br><b>numele_utilizatorului=\"Stephan\"</b> <i><-Aici atribui variablilei //numele_utilizatorului// valoarea \"Stephan\". Nu se scrie cuvântul \"var\" și se folosește un singur semn ”=”(nu două ca la compararea a două valori)</i><br><br><b>scrie(numele_utilizatorului);</b>     <i><-va printa în consolă \"Stephan\". Partea asta se numește ”invocarea variabilei”, adică aici îi spui calculatorului folosește variabila numită ”numele_utilizatorului”</i> <br>console.log(\"numele_utilizatorului\");   <i><-va printa în consolă \"numele_utilizatorului\". Aici îi spui calculatorului să scrie în consolă textul \"numele_utilizatorului\", nu valoarea variabilei cu acest nume.</i></div>",
				"p3":"Hai să vedem un pic ce reprezintă fiecare parte a acestui exemplu:",
				"p4":"<ol><li>var= prescurtare de la variabilă. Var este un ”cuvânt cheie” în JavaScript(și în cam toate limbajele de programare). Cuvânt cheie este un cuvânt are înțeles de sine stătatător înt-un limbaj de programare. Pe românește asta înseamnă că atunci când scri ”var” JS-ul știe că urmează să declari o variabilă. Cuvântul var nu are voie să fie folosit în JS în niciun alt context.</li><li>numele_utilizatorului = numele variabilei. Mereu când scri în cod numele variabilei JS-ul va ști că trebuie să îl înlocuiscă cu valoarea pe care o are variabila.</li><li>“Stephan” = valoarea variabilei.</li></ol>",
				"p5":"<b>Notă</b>: Declaratea unei variabile este cosiderată o comandă, adică trebuie pus ”;” sau scris pe un rând nou sau ambele.",
				"p6":"<b>Notă</b>: Numele variabilelor au voie să conțină doar caractere alfanumerice (litere și cifre) și simbolul ”_”. Orice alte simboluri precum ”?”, ”.”, ”-”, ”+” etc vor duce la erori. Recomandăm evitarea diacriticelor în declararea variabilelor.",
				"p7":"<b>Notă</b>: Pentru variabile cu nume format din mai mult de un cuvant se pot folosi 2 sisteme, ”cu_bara_jos” sau ”fiecareCuvantNouCuLiteraMare”. Poți folosi ce sistem îți place mai mult. Care sistem e folosit depinde de limbaj și de programator. Noi vom folosi ambele sisteme pentru a te obișnui cu ele. În JS se folosește aproape mereu sistemul ”fiecareCuvantNouCuLiteraMare”, numit și ”camelCase” (Scriere tip cămilă)",
				"p8":"Hai să vedem cum te descurci."
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonVariabelsOne(htmlDocData)",
			"Instructions": {
				"i1":"Declară o variabilă ”numeleMeu” și atribuiei ca valoare numele tău (ca-n exemplu)",
				"i2":"Primtează în consolă această variabilă(când spun această variabilă mă refer la valoarea ei)",
				"i3":"Pe următorul rând scrie comanda console.log(“Mă cheamă ” + numeleMeu). Vezi dacă poți să ghicești ce va printa în consolă"
			},
			"Next Lesson":"javascript_basic:Variabile-schimbarea valorii"
		},
		"javascript_basic:Variabile-schimbarea valorii": {
			"Title": "Variabile-schimbarea valorii",
			"Text": {
				"p1":"Bravo, văd că te descurci!",
				"p2":"Am spus lecția trecută că variabilele se aseamănă unor cuti ce conțin niște date. Hai să vedem acum cum putem schimba conținutul cutiilor acestora.",
				"p3":"Hai să începem cu un exemplu pentru schimbarea valorii unei variabile(a conținutului cutiei).",
				"p4":"<div class='codeSnipped'><b>var fructulMeuPreferat=\"mere\" </b> <i><-declarăm/creem variabila fructulMeuPreferat și-i atribuim o valoare. Ai voie să declari variaibila și să-i atribui valoarea într-un singur rând.</i><br><b>fructulMeuPreferat =\"pere\" </b>   <i><-schimbăm valoarea variabilei create</i> <br><b>scrie(fructulMeuPreferat)</b>  <i><-va printa \"pere\" în consolă</i></div>",
				"p5":"Atenție, odată ce schimbăm conținutul unei variabile nu mai putem recupera conținutul inițial. Dacă mai avem nevoie de conținutul inițial trebuie să-l salvăm într-o variabilă 2 înainte să schimbăm conținutul primei variabile, ca-n exemplul de mai jos",
				"p6":"<div class='codeSnipped'><b>var test=\"un text\"</b> <i> <-declarăm/creem variabila test și-i atribuim o valoare</i><br><b>var test2 =test</b>     <i><-declarăm/creem variabila test2 și-i atribuim valoarea variabilei test. Acum variabila test2 are valoarea ”un text”</i><br><b>test=\"alt text\"</b>     <i><-schimbăm valoarea variabilei test. Valoarea variabilei test2 nu se schimba </i><br><br><i>După executarea comenziilor de mais sus test are valoarea \"alt text\", iar variabila test2 are valoarea \"un text\"</i></div>.",
				"p7":"<b>Notă</b>: Deși am folosit analogia cu cutiile pentru a explica ce este o variabilă, trebuie menționat faptul că într-o structură de genul test2 =test conținutul variabilei test nu se golește în variabila test2, ci este copiat în variabila test2"
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"var cont_mail=\nvar serviciu_mail=\n\nvar mail_complet=",
			"Validator":"CheckLessonVariabelsTwo(htmlDocData)",
			"Instructions": {
				"i1":"În editor se află variabila cont_mail. Atribuie-i o valoare, orice dorești",
				"i2":"Variabilei servivciu_mail atribuie-i o valore. Exemple includ: “gmail.com”, “yahoo.com”, “gmx.com”",
				"i3":"Variabilei mail_complet atribuiei ca valoare cont_mail+“@”+servivciu_mail",
				"i4":"Folosește funcția scrie() pt a printa valoare variabilei mail_complet în consolă"
			},
			"Next Lesson":"javascript_basic:Mai multe despre variabile"
		},
		"javascript_basic:Mai multe despre variabile": {
			"Title": "Mai multe despre variabile",
			"Text": {
				"p1":"Hai să ne mai extindem cunoștințele legate de variabile.",
				"p2":"O proprietate esențială a variabilelor este faptul că variabilele pot stoca orice tip de date, de la string-uri la bool-uri la numere și încă multe altele despre care încă nu am vorbit.",
				"p3":"Un alt element important e faptul că JS-ul execută codul în ordinea în care e scris. Privește exemplul de mai jos",
				"p4":"<div class='codeSnipped'>var test=\"text text text\";<br>console.log(test);<br><br>//sus e un exemplu scris corect, jos unul greșit care nu va printa valoarea variabilei test<br><br>console.log(test);<br>var test=\"text text text\";</div>",
				"p5":"Hai să mai facem niște exerciții, să vedem ce putem construi cu variabilele. Să ne imaginăm că noi sntem respunsabili cu creerea unui site de socializare și dorim să scriem, într-o propoziție numele, vârsta și domiciliul unui utilizator, ceva de genul ”Bună, mă numesc [nume] am [varsta] ani și locuiesc în [țară]”, pentru a afișa apoi pe pagina noastră această propoziție sub poza utilizatorului.",
				"p6":"Pentru moment dorim doar să printăm această propoziție, când vom ajunge la aplicațiile JS în Web-development vom vorbi și despre cum putem afișa această propoziție pe un site web.",
				"p7":"În editor am declarat deja variabilele necesare. În mod normal valoarea acestor variabile vine dintr-o bază de date sau dintr-o căsuță pe care o completează chiar utilizatorul (ca ceqa de la log-in). Pentru exemplul acesta te vom ruga însă pe tine să dai valoare variabilelor. Vom vorbi despre cum pot fi salvate și extrase date dintr-o bază de date în cadrul cursului de bază de date."
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"var nume_de_familie=\nvar prenume=\nvar varsta=\nvar reseinta=\n\nvar nume_complet=\n\nvar propoziția_dorita=",
			"Validator":"CheckLessonVariabelsThree(htmlDocData)",
			"Instructions": {
				"i1":"Atribuie o valoare variabilelor ”nume_de_familie”, ”prenume”, ”varsta” și ”resedinta”. Valoarea variabilei ”varsta”să fie un număr(fără ghilimele), iar celelalte variabile să aibe ca valoare un string.",
				"i2":"variabilei ”nume_complet” atribuiei valoarea prenume +“ ”+nume_de_familie.",
				"i3":"variabilei propoziția_dorita atribuiei valoarea ”Bună, mă numesc “ +nume_complet+ ” am “ +varsta+ ” ani și locuiesc în “+resedinta",
				"i4":"folosește fruncția scrie() pentru a printa propoziția_dorita pe ecran."
			},
			"Next Lesson":"javascript_basic:Constante"
		},
		"javascript_basic:Constante": {
			"Title": "Constante",
			"Text": {
				"p1":"În afară de variabile în Js mai există și constante. Ele se comportă foarte asemănător cu variabilele, cu diferența că, valoarea constantelor, așa cum precizează și numele, nu poate fi schimbată. Îți poți imagina constantele ca pe niște cutiuțe ce pot să conină doar un lucru. Cel mai bun exemplu de utilizare practică a constantelor sunt constantele din matematică sau fizică.",
				"p2":"De exemplu:",
				"p3":"<div class='codeSnipped'>  const PI = 3.14159265359<br>const E=2.7182818284<br>const VITEZA_LUMINII=299792458 </div>",
				"p4":"Când declarăm constante în loc de cuvântul var scriem cuvântul const. Prin convenție constantele se scriu cu MAJUSCULE.",
				"p5":"Constantele sunt utile pentru a ne salva de chinul de a trebui să copiem de zeci sau sute de ori anumite numere urâte. De ex. dacă riem un program care să calculeze arii și volume de corpuri rotunde, nu trebuie să scriem de fiecare dată 3.14159265359, ci putem puri și simplu să accesăm constanta noastră PI.",
				"p6":"Pentru moment dorim doar să printăm această propoziție, când vom ajunge la aplicațiile JS în Web-development vom vorbi și despre cum putem afișa această propoziție pe un site web.",
				"p7":"În editor am declarat deja variabilele necesare. În mod normal valoarea acestor variabile vine dintr-o bază de date sau dintr-o căsuță pe care o completează chiar utilizatorul (ca ceqa de la log-in). Pentru exemplul acesta te vom ruga însă pe tine să dai valoare variabilelor. Vom vorbi despre cum pot fi salvate și extrase date dintr-o bază de date în cadrul cursului de bază de date."
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonConstants(htmlDocData)",
			"Instructions": {
				"i1":"Declară o constantă PI și atribuie-i valoarea 3.14",
				"i2":"Declară o variabilă ”raza_cercului” și atribuie-i o valoare (care vrei tu)",
				"i3":"Declară o variabilă ”aria_cercului” și atribuie-i ca valoare aria cercului de rază ”raza_cercului” (formula este PI*raza*raza)",
				"i4":"Printează în consolă valoarea variabilei ”aria_cercului”"
			},
			"Next Lesson":"javascript_basic:Array I"
		},
		"javascript_basic:Array I": {
			"Title": "Array I",
			"Text": {
				"p1":"Ok, acum că te-ai familiarizat cu variabilele și felul în care ele pot stoca date e timpul să vorbim despre o altă metodă de a stoca date în variabile și anume array-urile. Array-urile, numite în română matrici, tablouri sau vectori, nu sunt nimic mai mult decât colecții de date. Mai jos ai niște exemple de array-uri:",
				"p2":"<div class='codeSnipped'>  var limbaje_de_programare_studiate=[\"HTML\", \"CSS\", \"JavaScript\"];<br><br>var numerele_de_la_loterie=[6,34,23,42,12,31];<br><br>var multe_date=[3, \"masina\", true, 7]<br><br>scrie(multe_date [3]) </div>",
				"p3":"În exemplul de mai sus am creat trei array-uri. Parantezele pătrate indică JS-ului că urmează un array, iar virgulule despart elementele individuale. Scopul array-urilor este acela de a stoca mai multe date în aceași variabilă.",
				"p4":"Acum întrebarea este, cum putem extrage datele din array. Fiecare element din array are un nunumit ID sau index, adică un cod de identificare. Primul element are index-ul 0, al doilea element are index-ul 1 și așa mai departe. Codul de pe ultimul rând va printa în consolă numărul 7, deoarece acela este elementul cu index-ul 3 (deoarece începi să numeri de la 0 nu de la 1).",
				"p5":"Încearcă și tu!"
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonArraysOne(htmlDocData)",
			"Instructions": {
				"i1":"Crează un array numit ”pasiuniile_mele”. El trebuie să conțină minim 5 elemente.",
				"i2":"Printează în consolă primul, al doilea și ultimul element (fiecare cu câte o comandă separată)"
			},
			"Next Lesson":"javascript_basic:Array II"
		},
		"javascript_basic:Array II": {
			"Title": "Array II",
			"Text": {
				"p1":"Hai să reluăm o dată cum funcționează un array. Un array este o colecție de date în care datele pot fi accesate în funcție de ordinea lor în array( adică după index-ul lor). Într-un array primul element are indexul 0, următorul indexul 1 etc. până la ultimul element care are index-ul n-1 unde n e lungimea array-ului(numărul de element din array). Adică dacă un array are 3 elemente ultimul element va fi de index 2.",
				"p2":"Ce se întâmplă însă dacă vrem să modificăm elementele din array sau să adăugăm/scoatem elemente? Mai jos ai niște exemple explicate ce demonstrează tocmai aceste funcții.",
				"p3":"<div class='codeSnipped'><b>var fructele_mele_preferate=[\"mere\", \"pere\", \"cireșe\", \"struguri\"]</b>;<br><br><b>fructele_mele_preferate[2]=\"kiwi\" </b><i>codul acesta înlocuiește al treilea element din array (nu uita că indexarea începe de la 0) cu o valoare nouă. Adică noul array va fi de forma: [\"mere\", \"pere\", \"kiwi\", \"struguri\"]</i><br><br><b>fructele_mele_preferate.push(\"zmeura\",\"mure\")</b> <i>codul acesta adaugă elementele \"zmeura\" și \"mure\" la capătul array-ului. Array-ul astfel rezultat va fi de forma [ 'mere', 'pere', 'kiwi', 'struguri', 'zmeura', 'mure' ]</i><br><br><b>fructele_mele_preferate.splice(2,2) </b><i>codul acesta elimină elemente din array. Primul număr reprezintă index-ul de la care dorești să înceapă ștergerea elementelor, iar al doile număr reprezintă numărul de elemente ce le dorești șterse. În cazul nostru codul începe să șteargă elemente de la cel cu index 2 (adică \"cireșe\") și șterge două elemente (adică \"cireșe\" și \"struguri\", elementul imediat următor). Array-ul astfel rezultat va fi de forma [ 'mere', 'pere', 'zmeura', 'mure' ]</i><br><br><b>scrie(fructele_mele_preferate.length)</b><i> va printa pe consolă lungiea array-ului, adică numărul de elemente pe care le conține. În cazul nostru va printa ”4”.</i></div>",
				"p4":"Hai să disecăm un pic codul de mai sus:",
				"p5":"<ol><li>Pe primul rând creem un array nou și-l salvăm într-o variabilă, asta știam deja.</li><li>Al doilea rând schimbă valoarea elementului de pe poziția 2 a array-ului.</li><li>Pe rândul trei apare funcția push() -împinge-. Această funcție ”împinge” elemente noi la capătul unui array. Între parntezele funcției poți adăuga câte elemente dorești.</li><li>Al patrulea rând prezintă funcția cea mai complicată a acestui curs, funcția splice(start, câte) -a uni/ a îmbina (de ex. capetele unei sfori)-. Acastă funcție ”rupe” array-ul începănd cu elementul cu index start. Începând cu acesta, adică numărând-ul și pe el, această funcție va elimina câte elemente specifică al doile număr.</li><li>Pe untimul rând dorim să printăm în consolă lungimea array-ului, adică câte elemente conține. Ține minte faptul că length -lungime- se scrie fără paranteze. Se scrie <b>fără</b> paranteze deoarece este o proprietate nu o funcție, dar mai multe despre acest subiect mai târziu.</li></ol>",
				"p6":"Hai să vedem cum te descurci tu!"
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonArraysTwo(htmlDocData)",
			"Instructions": {
				"i1":"Crează un array de cinci elemente numit ”locuri_de_vizitat”",
				"i2":"Schimbă valoarea unuia dintre elemente",
				"i3":"Adaugă trei elemente noi la array-ul tău",
				"i4":"Strege primele două elemente din array (primul element e cel cu inex 0)",
				"i5":"Printează lungimea array-ului final"
			},
			"Next Lesson":"javascript_basic:Array de array-uri"
		},
		"javascript_basic:Array de array-uri": {
			"Title": "Array de array-uri",
			"Text": {
				"p1":"Foarte bine, o ultimă mențiune legată de array-uri. Array-urile nu sunt limitate la a salva doar tipurile elementare de date. Poți crea un array de orice, inclusiv un array de array-uri. Să ne imaginăm de exemplu că dorim să creem o listă de laureați ai premiului nobel din românia. În această listă dorim să salvăm numele lor, discipila pentru care au fost laureați și anul în care au obținut premiul.",
				"p2":"<div class='codeSnipped'>var nobelisti_romani=[<br> &#160 &#160 &#160[\"George Emil Palade\", \"Medicină\", 1974],<br> &#160 &#160 &#160[\"Ioan Moraru\", \"Pace\", 1985],<br> &#160 &#160 &#160[\"Elie Wiesel\", \"Pace\", 1986],<br> &#160 &#160 &#160[\"Herta Müller\", \"Literatură\", 2009],<br> &#160 &#160 &#160[\"Ștefan Hell\", \"Chimie\", 2014]<br>];<br><br>nobelisti_romani(personalitati[3][1]); //Va printa \"Literatură\" în consolă. </div>",
				"p3":"Primul număr reprezintă index-ul elementului din array-ul mare iar al doile număr reprezintă indexul elementului din array-ul din interior.",
				"p4":"Adică<b> personalitati[3]=[“Herta Müller”, “Literatură”, 2009]</b> (elementul cu index 3 din array-ul personalități ), iar <b>personalitati[3][1]= “Literaură”</b>.(elementul de index 1 din array-ul menționat anterior)",
				"p5":"Datorită faptului că array-ul este structurat în acest mod, ne este foarte ușor să salvăm și să accesăm toate datele dorite cu ajutorul unei singure variabile.",
				"p6":"<b>Notă</b>:Un array simplu se numește array unidimensional. Un array de array-uri(precum cel din exemplu) se numește array bidimensional. Un array de array-uri de array-uri se numește array tridimensional și așa mai departe.",
				"p7":"Încearcă și tu!"
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonIf(htmlDocData)",
			"Instructions": {
				"i1":"Crează un array numit ”melodiile_mele_preferate” ce să conțină minim cinci array-uri",
				"i2":"Fiecare array ”mic” (din interiorul array-ului ”melodiile_mele_preferate”) să conțină două string-uri, numele piesei și interpretul (în ordinea asta)",
				"i3":"Printează în consolă ”melodiile_mele_preferate[2][0]”. Poți ghici ce va printa comanda înainte să apeși butonul execută?"
			},
			"Next Lesson":"javascript_basic:If"
		},
		"javascript_basic:If": {
			"Title": "If",
			"Text": {
				"p1":"Bine, destul despre variabile și array-uri pentru moment. Acum că știm să folosim variabile, e timpul să trecem mai departe la o structură folosită de programatori zilnic, și anume structura <b>if</b> -dacă-.",
				"p2":"<div class='codeSnipped'><b>if </b><b>(</b><i>condiție</i><b>) {</b><br><br>&#160 &#160 &#160<i>comezi</i><br><b>}</b><br><br>var varsta=21<br><br><b>if</b><b> (</b>varsta>=14<b>) {</b><br>&#160 &#160 &#160  scrie(\"înseamnă că deja ai buletin\")<br><b>}</b><br><br><b>if </b><b>(</b></b>true<b>) {</b><br>&#160 &#160 &#160  scrie(\"vei vedea textul acesta\")<br><b>}</b><br><br><b>if </b><b>(</b>false<b>) {</b><br>&#160 &#160 &#160  scrie(\"nu vei vedea textul acesta\")<br><b>}</b></div>",
				"p3":"Propoziția condițională <b>if</b> este alcătuită din două părți: <i>condiția</i>, care se scrie între paranteze rotunde și <i>comenziile</i>, scriese între paranteze acolade. Dacă între parantezele rotunde se află o condiție adevărată, atunci vor fi executate comenziile din interiorul parantezelor acolade, iar în caz contrar codul le va ignora.",
				"p4":"<b>Notă</b>: Nu este o regulă obligatorie, dar e recomandabil să indentezi textul dintre parantezele acolade (să-l scri cu un tab mai spre dreapta paginii)",
				"p5":"E rândul tău să scri un <b>if</b>"
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonIf(htmlDocData)",
			"Instructions": {
				"i1":"Scrie un if care să aibe condiția adevărată și să printeze textul “Am reușit!” în consolă",
				"i2":"Scrie un if care să aibe condiția falsă și să printeze textul “Am eșuat!” în consolă"
			},
			"Next Lesson":"javascript_basic:Not"
		},
		"javascript_basic:Not": {
			"Title": "Not",
			"Text": {
				"p1":"Acum că am vorbit despre structura if, trebuie să vorbim si despre diverșii operatori logici pe care îi putem folosi în interiorul if-ului.",
				"p2":"Primul astfel de operator este <b>!</b> (Not= nu/operatorul de negare). Acesta inversează valoarea unui bool, adică dacă e adevărat îl face să fie fals si viceversa.",
				"p3":"<div class='codeSnipped'>var suntSatul=true;<br>if(<b>!</b>suntSatul){ <i> &#160 &#160 //daca nu sunt sătul</i><br>   &#160 &#160 scrie(\"Putem să mergem să mancăm ceva?\")<br>}<br><br>var x=12<br>if(<b>!</b>(x<5)){<i> &#160 &#160 //dacă x nu e mai mic decât 5</i><br>  &#160 &#160 &#160 scrie(\"x nu e mai mic decât 5\")<br>  &#160 &#160 &#160 scrie(\"aici am folosit paranteze ca să spunem calculatrului în ce oprine să execute operațiile\")<br>}</div>",
				"p4":"Hai să ne uităm un pic la exemple. În primul caz variabila noastră ”suntSatul” are valoarea ”true”. În interiorul if-ului folosim operatorul de negare, adică schimbăm valoarea din true în false. Deoarece condiția din parantezele rotunde ale if-ului are valoarea false comenziile din interiorul său nu vor fi executate.",
				"p5":"<b>Notă</b>: Folosirea operatorului de negare în parantezele rotunde ale if-ului are efect doar acolo. Valoarea variabilei <b>nu</b> se schimbă.",
				"p6":"În al doilea exemplu avem o comparație. Valoarea acetei comparații este ”false”(12, valoarea variabilei x nu e mai mare decât 5). Negând acest rezultat, adică punând semnul exclamării în fața cobparației, valoarea ei devine true, deci comenziile in interiorul if-ului sunt executate"
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonNot(htmlDocData)",
			"Instructions": {
				"i1":"Scrie un if ce să conțină o negație"
			},
			"Next Lesson":"javascript_basic:And_or"
		},
		"javascript_basic:And_or": {
			"Title": "And Or",
			"Text": {
				"p1":"Foarte bine, am învățat cum putem folosi if-ul pntru a verifica o condiție. Ce facem însă dacă vrem să verificăm mai multe condiții simultan. Pentru asta folosim simbolurile <b>&&</b> și <b>||</b> însemnâd <b>și</b> respectiv <b>sau</b>. Iată niște exemple",
				"p2":"<div class='codeSnipped'><i>//primul exemplu</i><br>var ploaie=true; <i>//plouă?</i><br>var frig =false;  <i>//e frig?</i><br><br>if(frig || ploaie){  <i>//dacă plouă sau e frig</i><br>  &#160 &#160 &#160 scrie(\"îmi pare rău, nu putem merge la plajă\")<br>}<br><br><i>//alt exemplu</i><br>var x=15;<br><br>if(x>10 && x<20){ <i>// dacă x e mai mare decât 10 și mai mic decât 20</i><br>  &#160 &#160 &#160 scrie (\"numărul este cuprins între 10 și 20\")<br>}</div>",
				"p3":"Să ne uităm așadar la primul exemplu. În aceste exemplu condițiile sunt legate între ele cu ||(sau). Dacă legi condițiile între ele cu ”sau”, atunci comenziile din if vor fi executate dacă minim una dintre ele este adevărată. Deoarece în exemplul nostru prima variabilă (ploaie) are valoarea ”true” condiția din if va fi executată, iar pe ecran chiar va apărea textul “îmi pare rău, nu putem merge la plajă”.",
				"p4":"În al doilea exemplu legăm condițiile cu &&(și). În acest caz comenziile din if sunt exeutate doar dacă toate condițiile sunt îndeplinite. În exemplul nostru variabila x are valoarea 15. Prima condiție (x>10) este îndeplinită, dar a doua (x<20) nu este îndeplinită. În consecință comenziile din if nu sunt executate."
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"var aiPermis=\nvar aiBaut=\n\n\nvar culoareaMasinii=\n",
			"Validator":"CheckLessonAndOr(htmlDocData)",
			"Instructions": {
				"i1":"În editor ai trei variabile. Da-le primelor două ca valoare un bool iar celei de-a treia un string ",
				"i2":"Scrie un if care să afișeze textul \"Ai voie să conduci\" dacă nu ai băut si ai permis.",
				"i3":"Scrie alt if care să afișeze textul \"Îmi place mașina asta\" dacă aceasta are culoarea \"galben\" sau \"albastru\""
			},
			"Next Lesson":"javascript_basic:If else"
		},
		"javascript_basic:If else": {
			"Title": "If else",
			"Text": {
				"p1":"Acum ne-am obișnuit deja să cu condiția if și știm cum să o folosim pentru a spune calculatorului ce să facă dacă o condiție este îndeplinită. Hai să vedem însă cum să spunem calculatorului să facă ceva și în cazul în care condiția e falsă. Pentru a face asta folosim structura <b>if…else…</b> <i>(dacă…altfel…)</i>. Structura arată în felul următor",
				"p2":"<div class='codeSnipped'>var varsta =16<br><br>if(varsta>=18){<br>&#160 &#160 &#160console.log(\"ești major\")<br>}<br>else{<br>&#160 &#160 &#160console.log(\"nu ești major\")<br>}</div>",
				"p3":"Iată cum funcționează strunctura <b>if…else…</b>: Dacă îi adevărată condiția din if atunci va executa codul din paranteza acoladă de lângă if, altfel va executa codul din paranteza acoladă de după else.",
				"p4":"Putem folosi structura if..else… spre exemplu pentru a vedea dacă un umăr este par. Ca un număr să fie par, el trebuie să se împartă exact la doi. Adică restul împărțirii sale la 2 trebuie să fie 0. Pentru a obține restul împărțirii unui număr la 2 folosim operatorul ”%”(modulo), iar pentru a copara 2 numere folosim semnul”===”. Adica vom scrie condiția x%2===0. Această condiție se citește în modul urmăror:",
				"p5":"<ol><li>x%2 reprezintă restul împărțirii lui x la 2</li><li>===0 se citește este egal cu 0</li></ol>",
				"p6":"Adică toată expresia:",
				"p7":"<div class='codeSnipped'>if(x%2===0){<br> &#160 &#160 &#160//instrucțiuni 1<br>} <br>else{<br> &#160 &#160 &#160//instrucțiuni 2<br>}</div>",
				"p8":"se citește ”Dacă restul împărțirii lui x la 2 este egal cu 0 execută instrucțiunile 1 altfel execută instrucțiunile 2"
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"var x=",
			"Validator":"CheckLessonIfElse(htmlDocData)",
			"Instructions": {
				"i1":"Atribuie variabilei x ca valoare un număr",
				"i2":"Scrie un if…else cu condiția de număr par.",
				"i3":"Dacă numărul e par afișează în consolă textul ”Numărul e par”, altfel afișează în consolă textul ”Numărul este impar”"
			},
			"Next Lesson":"javascript_basic:Else if"
		},
		"javascript_basic:Else if": {
			"Title": "Else if",
			"Text": {
				"p1":"Foarte bine, dar trebuie să ști că în afară de if…else există și expresia else if. Ea se traduce ”altfel dacă”. De exemplu:",
				"p2":"<div class='codeSnipped'>var a=3<br>var b=5<br><br>if(a>b){ //daca a>b<br> &#160 &#160 &#160  scrie(\"a este mai mare decât b\")<br>}<br>else if(a===b){ //altfel daca a=b<br> &#160 &#160 &#160  scrie(\"a este egal cu b\")<br>}<br>else{//altfel b>a (singura op'iune rămasă)<br> &#160 &#160 &#160  scrie(\"b este mai mare decât a\")<br>}</div>",
				"p3":"<b>Notă</b>: Poți înlănțui câte else if-uri dorești",
				"p4":"Hai să folosim și noi expresia else if pentru a crea un program simplu ce ne salută cu ”Bună dimineața”, ”Bună ziua”,”Bună seara” sau ”Noapte bună” în funcție de ora la care îl pornim."
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonElseIf(htmlDocData)",
			"Instructions": {
				"i1":"Declară o variabilă ”ora” și atribuie-i un număr între 0 și 23.",
				"i2":"Dacă ora este între 4 și 10 (inclusiv) printează în consolă mesajul ”Bună dimineața”",
				"i3":"Altfel dacă ora este între 11 și 18 printează în consolă mesajul ”Bună ziua”",
				"i4":"Altfel dacă ora este între 19 și 22 printează în consolă mesajul ”Bună seara”",
				"i5":"Altfel printează în consolă mesajul ”Noapte bună”"
			},
			"Next Lesson":"javascript_basic:For I"
		},
		"javascript_basic:For I": {
			"Title": "For I",
			"Text": {
				"p1":"Perfect, acum că am terminat cu expresile condiționale, e timpul să trecem la loop-uri. Un loop este pur și simplu o structură care se repetă, adică o serie de comenzi care este executată de mai multe ori. Nu te teme, totul va fi foarte clar după ce vezi exemplele.",
				"p2":"Primul loop pe care îl vom învăța se numește for(){}-pentru(o anumită perioadă de timp)-. El arată în felul următor",
				"p3":"<div class='codeSnipped'>for (var i=0; i<=9; i++){<br>&#160 &#160 &#160 scrie(\"Nu mă voi da bătut\") <br><i> &#160 &#160 &#160 //va scrie propoziția \"Nu mă voi da bătut\" de zece ori în consolă</i><br>  &#160 &#160 &#160 <i>//da, de la 0 la 9 sunt 10 numere, dacă nu ne crezi numără pe degete<br></i>}<br><br>for (var i=1; i<=100; i++){<br>&#160 &#160 &#160 scrie(i)<br> <i>&#160 &#160 &#160//va printa numerele de la 1 la 100 în consolă. Valoarea variabilei i crește cu câte o unitate de fiecare datâ când se execută loop-ul</i><br>}<br><br>for(var i=1; i<=10; i--){<br>&#160 &#160 &#160<br>}<br><br><i>// for(var i=0; i<=9; i++){} Se citește în modul următor: ”Începând de la 1 cât timp i este mai mic sau egal cu 10 fă ceva(comenzile dintre parantezele acolade) apoi adună 1 la i”</i></div>",
				"p4":"Ok, hai să disecăm monstrozitatea aia de mai sus.",
				"p5":"<ol><li>var i=0 <i> //partea asta spune loop-ului de unde să înceapă</i></li><li>i=<9<i> //partea asta spune loop-ului cât timp să repete ceea ce face (în cazul nostru cât timp i este mai mic sau egal cu 9)</i></li><li>i++ <i> //operator de incrementare, mărește pe i cu 1. Partea asta se mai numește pasul for-ului.</i></li></ol>",
				"p6":"Loop-ul funcționează în modul următor: Începând de când i este egal cu 0 și cât timp i este mai mic sau egal cu 9 execută codul dintre parantezele acolade. De fiecare dată când execuți codul mărește pe i cu 1.",
				"p7":"<b>Important</b>: Este posibil să creezi un loop infinit. Dacă vei face asta programul tău se va bloca. Exemplul al treilea de for prezintă un loop infinit. variabila i începe de la 1 și apoi scade cu câte unu la fiecare pas (datorită simbolului –), adică o ia 1,0,-1,-2,-3 etc. În consecință va fi mereu mai mică sau egală cu 10 și loop-ul va continua la nesfărșit (respectiv până se prăbușește programul)",
				"p8":"Notă: Și pentru loop-ul for textul din ghilimelele acolade de indentează. E opțional, dar e recomandat deoarece face codul mult mai ușor de citit pentru oameni.",
				"p9":"Dacă nu ai înțeles încă tot, nu-ți fă griji, vom dedica și următoarele lecți înțelegerii loop-ului for."

			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonForOne(htmlDocData)",
			"Instructions": {
				"i1":"Ai primit temă să scri de 200 de ori propoziția ”Voi indenta corect codul” în consolă",
				"i2":"Deoarece ești deștept și nu vrei să scri 1000 de linii de cod vei folosi un loop for de la 1 la 200 cu pas 1 și vei trece console.log(“Voi indenta corect codul”) în loop."
			},
			"Next Lesson":"javascript_basic:For II"
		},
		"javascript_basic:For II": {
			"Title": "For II",
			"Text": {
				"p1":"Hai să mai lucrăm niște exerciții cu for-uri. Jos ai niște exemple și explicațiile lor, la instrucțiuni ai exercițiile în sine.",
				"p2":"<div class='codeSnipped'><b>for(var i=10; i<=100; i+=10){</b><i>//i+=10 se citeste mărește pe i cu 10 la fiecare pas</i><br>  &#160 &#160 &#160 <b>scrie(i)</b> <i>//acest i este acelaș cu cel din for. Acest cod va printa numerele de la 10 la 100 din 10 în 10</i><br>  &#160 &#160 &#160 <i>//i+=10 înseamnă adună variabila i cu 10 la fiecare pas. Acelaș lucru se poate scrie și i=i+10. </i><br><b>}</b><br><br><b>for(var i=10; i<=100; i-=5){</b><br>  &#160 &#160 &#160 <b>scrie(i)</b> <i>//Acest cod va număra de la 10 în jos, 10, 5, 0, -5, -10 etc. Cât timp i<=100 (adică la nesfârșit)</i><br>  &#160 &#160 &#160<i> //Acest cod va crea un loop infinit, deoarece i nu va fi niciodată mai mare sau egal cu 100. </i><br>  &#160 &#160 &#160 <i>//Dacă scri așa ceva programul tău se va prăbuși</i><br><b>}</b><br><br><i>//Iata o formă corectă de loop la care i(numit și indexul loop-ului scade)<br>//Acest for cva număra invers de la 20 la 1 din 1 în 1</i><br><b> for(var i=20; i>=1; i-=1){<br>&#160 &#160 &#160scrie(i)<br>}</b></div>"

			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonForTwo(htmlDocData)",
			"Instructions": {
				"i1":"Scrie un for care să printeze din 2 în 2, în ordine crescătoare numerele de la 4 la 8 (inclusiv)",
				"i2":"Scrie un for care să printeze din 5 în 5, în ordine descrescătoare numerele de la 125 la 5 (nu și pe 5)",
				"i3":"Scrie un for care să printeze de o sută de ori cuvântul ”Învăț”",
				"i4":"Scrie cele trei for-uri în ordinea asta"
			},
			"Next Lesson":"javascript_basic:For peste array"
		},
		"javascript_basic:For peste array": {
			"Title": "For peste array",
			"Text": {
				"p1":"Poate că ai putut ghici deja, dar principala funcție a for-urilor nu este scrie numere în ordine sau să printeze acelaș cuvânt de sute de ori. Principalul scop al loop-ului for este să ne ofere o metodă de a trece prin toate elementele unui array. Adică dacă avem un array numit ”test” de 10 elemente și vrem să obținem toate numele nu trebuie să scriem test[0], test[1], test[2]…, ci putem scrie un for care să facă asta pentru noi.",
				"p2":"În primul rând hai să vedem cum trebuie scris for-ul. Index-ul primului element din array este 0, deci ar trebui să începem să numărăm de la 0. Index-ul ultimului element este, după cum am spus deja, egal cu numărul de elemente din array minus 1. Pentru a obținenumărul de elemente dintr-un array, număr numit și lungimea array-ului, vom folosi proprietatea length a array-ului. Deoarece dorim să obținem toate elementele din array, vom mări pe i(index-ul for-ului) cu 1 la fiecare pas.",
				"p3":"Mai jos ai exemplul de for care va printa toate elementele array-ului",
				"p4":"<div class='codeSnipped'><b>var test=[\"Aici\",\"poti\", \"avea\", \"oricate\", \"elemente\", \"doresti\"]<br><br>for(var i=0; i<=test.length-1; i++){<br>  &#160 &#160 &#160 scrie(test[i]);<br>}</b><br><br><i>//folosim test.length-1 în loc să scriem direct 5 deoarece formularea aceasta va funcționa indiferent câte elemente avem în array. </i><br><br><i>//o formă mai explicită pentru a face acelaș lucru ca mai sus ar fi următoarea:</i><br><br><b>for(var i=0; i<=test.length-1; i++){<br>  &#160 &#160 &#160 var element= test[i];<br>  &#160 &#160 &#160 scrie(element);<br>}</b><br><br><i>//variabilei element îi atribuim valoarea vriabilei test[i]. Adică la fiecare pas valoarea acestei variabile se schimbă</i><br><i>//aceast tip de variabilă se mai numește și variabilă auxiliră/ajutătoare, deoarece nu este necesară, dar ne poate ușura munca.</i> <br><i>//În continuare poți folosi ce tip de scriere dorești. Care este mai practic depinde de situație. În geeral, dacă folosești o valoare mai mult decât o dată, atunci merită să-i salvezi valoarea într-o variabilă auxiliară (ajutătoare)</i>.</div>",
				"p5":"Deoarece variabila i are pe rând valorile 0,1,2,..până la array.length-1 (inclusiv), înseamnă că ea ia pe rând valoarea poziției fiecărui element din array. Așadar în timpul loop-ului variabila test[i] va lua ca valoare, pe rând fiecare element din array.",
				"p6":"Hai să vedem dacă ești pregătit pentru o provocare ceva mai grea (nu te speria dacă nu reușești din prima, suntem aici să te susținem). Sarcina ta este să vezi care numere dintr-un array sunt mai mari decât 12 și să le printezi pe acestea în consolă."

			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonForThree(htmlDocData)",
			"Instructions": {
				"i1":"Scrie un array de minim 10 elemente numit ”numere”. El trebuie să conțină, evident, numere",
				"i2":"Folosește un for de la 0 la numere.length-1.",
				"i3":"În ineriorul for-ului scrie un if care să verifice dacă numerese sunt mai mari decât 12 (strict mai mari)",
				"i4":"Dacă numerele sunt mai mari decât 12, adică dacă acea condiție din if este adevărată, printează în consolă numărul respectiv",
				"i5":"Acest if nu are nevoie de else deoarece dacă numărul nu e mai mare decât 12 atunci nu trebuie făcut nimic"
			},
			"Next Lesson":"javascript_basic:While"
		},
		"javascript_basic:While": {
			"Title": "While",
			"Text": {
				"p1":"Perfect, pentru moment am terminat cu primul tip de loop, adică cu loop-ul for. Acum vom trece la următorul loop, numit while-cât timp/în timp ce-. Acest loop arată în felul următor:",
				"p2":"<div class='codeSnipped'><b><br>while(</b><i>//condiție</i><b>){<br>&#160 &#160 &#160 </b><i>//instructiuni</i><b><br>}<br>var i=0;<br><br>while(i<10){<br>&#160 &#160 &#160 i++;<br>&#160 &#160 &#160 scrie(i);<br>}<br><br>var parola_introdusa_de_tine;</b><i>//imagineaza-ti ca valoarea acestei variabile vine dintr-un input de pe un site, ex. login-ul de la mail</i><br><b>var parola_corecta;</b><i>//valoarea acestei variabile vine dintr-o baza de date.</i>/<br><br><b>while(parola_introdusa_de_tine!==parola_corecta){<br>&#160 &#160 &#160 scrie(\"Parola gresita. Te rog sa introduci din nou parola\")</b><br>&#160 &#160 &#160 <i>//aici scriem cod care să permită utilizatorului să introducă altă parolă </i><br><b>}</b></div>",
				"p3":"Al doilea while din exemplu s-ar citi în modul următor: Cât timp i este mai mic decât 10, mărește la fiecare pas pe i cu 1 și printează-l pe i în consolă. Acest while se comportă exact ca un for(var i=0; i<10; i++){}.",
				"p4":"Așadar întrebarea logică ar fi când și de ce să folosești while în loc de for. For are marele dezavantaj de a avea un număr fix de pași. for(var i=0; i<10; i++){} va executa codul din paranteze de 10 ori, indiferent ce se întâmplă pe parcurs. While nu suferă de o asemenea limitare. While nu execută codul dintre parantezele acolade de un număr fix de ori(nu neaparat), ci de câte ori e nevoie ca să se îndeplinească condiția.",
				"p5":"Să ne uităm de exemplu la al treilea while din exemplu. Acela este genul de while care nu ar putea fi inlocuit cu un for (prea simplu/fara niste cod tare intortochiat). Loop-ul acela se citește în modul următor: „Cât timp parola_introdusa_de_tine nu este egală(aceași) cu parola_corectă scrie în consolă textul “Parola gresita. Te rog sa introduci din nou parola””. Motivul din care acest loop nu ar putea fi scris cu un for este faptul că nu știm de câte ori trebuie să anuntăm utilizatorul că a scris parola greșit. Poate o scrie o dată greșit, poate de două ori, poate niciodată, poate de 10 ori. De acea spunem pur și simplu ”Cât timp parola e greșită”.",
				"p6":"<b>Notă</b>: Și un loop while poate deveni loop infinit (se întmplă chiar mai des decât pentru for)",
				"p7":"<b>Important</b>: Exemplul cu parolele e pur didactic. Modul acesta de stocare și folosire a paroleleor este foarte nesigur și poate duce la breșe enorme în securitate. Pentru mai multe detalii te rog să accesezi cursul de securitate digitală."

			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonWhile(htmlDocData)",
			"Instructions": {
				"i1":"Crează o variabila numită ”numar” și atribuie-i valoarea 0",
				"i2":"Scrie un while care să scrie valoarea variabilei număr în consolă, cât timp valoarea respectivă este mai mică decât 0.75",
				"i3":"La fiecare pas, după ce scri valoarea variabilei ”numar”, atribuie-i o nouă valoare aleatorie",
				"i4":"Pentru a-i atribui o valoare aleatorie foloseste functia Math.random(). În modul următor: numar=Math.random()",
				"i5":"Cea ce face funcția Math.random() este să genereze un număr aleatoriu cuprins între 0 și 1",
				"i6":"Vei vedea că acest cod va genera numere aleatorii și le va printa în consolă până când va genera un număr mai mare sau egal u 0.75. Deoarece aceste numere sunt aleatorii nu știm câte trebuiesc generte până să dăm peste unul mai mare decât 0.75, deci folosim while nu for"
			},
			"Next Lesson":"javascript_basic:Functii"
		},
		"javascript_basic:Functii": {
			"Title": "Functii",
			"Text": {
				"p1":"E momentul să sărbătorim un pic. În acest moment am terminat cu elementele elementare ale programării și putem începe etapa a doua a cursurilor. În lecțiile ce urmează vom discuta despre doar două concepte, funcții și obiecte. După ce terminăm cu ele vom învăța însfârșit să folosim JS-ul pentru a cre pagini web dinamice(pagini ce reacționează la input-ul user-ului).",
				"p2":"Să începem cu funcțiile. După cum ști ai folosit deja niște funcții. scrie() și Math.random() sunt niște exemple bune. O funcție, în cea mai simplă formulare, este o bucată de cod care face ceva și poate fi folosită de mai multe ori. De exemplu funcția scrie() scrie ceva în consolă și Math.random() generează un număr aleatoriu între 0 și 1.",
				"p3":"Hai să vedem niște exemple de funcții:",
				"p4":"<div class='codeSnipped'><i>//partea asta se numeste definitia/declaratia functiei. Aici spui ce are de facut functia</i><br><b>function saluta(){<br>&#160 &#160 &#160 scrie(\"Salut\")<br>&#160 &#160 &#160 scrie(\"Ma bucur sa te revad\")<br>}</b><br><br><i>//partea asta se numeste invocarea functiei. Aici spui calculatorului sa execute functia, adica acel cod care se afla intre parantezele acolade la definirea functiei</i><br><br><br><b>saluta()</b><br><br><i>//numerele a si b dintre parantezele rotunde se numesc parametri functiei</i><br><b>function aduna(a, b){<br>&#160 &#160 &#160 var suma=a+b </b><i>//acești a și b sunt aceași cu cei de dintre parantezele rotunde</i> <br>&#160 &#160 &#160 <b>scrie(suma)<br>}</b><br><br><i>//cand invoci o functie numarul de parametri pe care ii treci intre parantezele rotunde trebuie sa fie acelas cu numarul de parametri dintre parantezele rotunde din definitia functiei</i><br><br><b>aduna(4,6)</b><br><i>//deoarece funcția aduna(a,b) afișează suma numerelor dintre parantezele rotunde(suma parametrilor săi),<br>//dacă invocăm funcția aduna cu parametri 4 și 6 ea va scrie în consolă numărul 10 (suma lor)</i></div>",
				"p5":"Hai să ne uităm în primul rând la definiția unei funcți. Pria oară trebuie scris cuvântul <i>function</i>. Acesta indică JS-ului că urmează o funcție. Urmează numele funcției și un set de paranteze rotunde ce conțin parametri funcției(dacă funcția are parametri, nu e obligatoriu). Apoi urmează un set de paranteze acolade ce conțin instrucțiuniile ce trebuiesc invocate, exact ca la if sau for sau while (care și ele sunt, în termeni practici niște funcții, dar nu chiar)",
				"p6":"Invocarea funcției este cea ce ai făcut deja cu funcția scrie(), pur și simplu spui calculatorului execută funcția asta.",
				"p7":"Hai să vedem cum te descurci"

			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonFunctionOne(htmlDocData)",
			"Instructions": {
				"i1":"Definește o funcție numită ”medieAritmetica”.",
				"i2":"Funcția trebuie să aibă doi parametri, îi poți numi cum dorești(recomandăm a și b sau nr_unu și nr_doi)",
				"i3":"în interiorul funcției (între parantezele acolade) declară o variabilă numită ”media” și atribuiei ca valoare media aritmetică a parametrilor. Formula mediei aritmetice este (a+b)/2",
				"i4":"Printează în consolă valoarea variabilei ”media” (scrie comanda asta tot ]n interiorul funcției ”medieAritmetică()”)",
				"i5":"Invocă funcția de trei ori pentru a calcula media a trei perechi de numere (ce numere dorești)"
			},
			"Next Lesson":"javascript_basic:Return"
		},
		"javascript_basic:Return": {
			"Title": "Return",
			"Text": {
				"p1":"Bravo, tocmai ai scris prima ta funcție. Dar, până acum, tot ce făcea funcția era să printeze ceva în consolă. Dar poate că nu asta ne dorim. Poate că dorim să salvăm valoarea mediei aritmetice într-o variabilă și să o folosim mai târziu pentru alt ceva. Pentru a primi o valoare de la o funcție folosim cuvântrul return-înapoiază (noi dăm funcției parametri iar ea ne înapoiază rezultatul)-.",
				"p2":"Un exemplu se află mai jos",
				"p3":"<div class='codeSnipped'><i>//o funcție asemănătoare cu cea de lecția trecută</i><br><b>function medieAritmetică(a,b){<br>&#160 &#160 &#160var media=(a+b)/2;<br>&#160 &#160 &#160var return media; </b><i>//cuvântul return spune funcției ce valoare trebuie să înapoieze/să returneze</i><br>&#160 &#160 &#160<b>var scrie(\"nu ar trebui să vezi acest mesaj\")</b> <i>//în momentul în care funcția dă de cuvântul return ea se oprește. De acea instrucțiuniile de după return sunt ignorate</i><br>}<br><br><b>var test=medieAritmetică(2,9)</b><i>// valoarea variabilei test va fi numărul pe care funcția îl returnează/înapoiază dacă  îi dăm parametri 2 și 9. Adică variablila ”media” dn interiorul funcției medieAritmetică(a,b), deoarece asta am spus funcției să returneze</i><br><br><b>scrie(test)</b> <i>//aici pur și simplu printăm valoarea variabilei test în consolă</i></div>",
				"p4":"Iată așadar cum putem spune unei funcți că ne dorim să obținem ceva de la ea. E timpul să încerci și tu ;)"
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonFunctionTwo(htmlDocData)",
			"Instructions": {
				"i1":"Scrie o functie numită ”maxim” care să returneze cel mai mare dintre 2 numere",
				"i2":"Funcției îi trebuiesc 2 parametri, numerele pe care urmează să le compari. Hai să le spunem a și b",
				"i3":"Primul lucru pe care trebuie să-l faci e să copari cele două numere. Dacă(if) a este mai mare decât b atunci trebuie să-l returnezi pe a",
				"i4":"Altfel, dacă (else if) a este mai mic decât b trebuie să-l returnezi pe b",
				"i5":"Altfel (else) înseamnă că ele sunt egale, deci poți să-l returnezi pe care vrei.",
				"i6":"Printează maximul dintre 4 perechi de numere în consolă(ce perechi dorești). Pentru asta poi folosi sintaxa \"scrie(maxim(a,b))\", unde a și b sunt numere date de tine",
				"i7":"Ne simțim moral obligați să specificâm faptul că JS include deja o asemenea funcție, numită Math.max(). Te-am însărcinat să reproduci această funcție din două motive, pentru că e un exemplu bun de funcție cu retrun și ca să vezi că nu e necesar să înveți tot cea ce există într-un limbaj ca să te poți apuca de creat chestii tari(chiar dacă adesea ușurează munca)"
			},
			"Next Lesson":"javascript_basic:Functii II"
		},
		"javascript_basic:Functii II": {
			"Title": "Funcții II",
			"Text": {
				"p1":"Foarte bine, funcția ta returnează ce trebuie. Hai să mai lucrăm o funcție. Mai exact hai să optimizăm(adică să înbunătățim) funcția de medie aritmetică pe care am scris-o anterior. Hai să o extindem astfel încât ea să funcționeze nu doar pentru două numere, ci pentru oricâte numere dorim. Să ne imaginăm că acest parametru se numește ”numerele”",
				"p2":"Pentru a face asta trebuie mai întâi să vedem cum putem scrie funcția astfel încât ea să acepte un număr variabil de numere. Ceea ce putem face este să trimitem funcției ca parametru un array de numere. Astfel funcția noastră va avea un singur parametru, dar acel parametru(array-ul) putea conține câte numere dorim.",
				"p3":"Al doilea lucru pe care trebuie să-l facem este să creem două variabile, ”suma”, ce reprezintă suma numerelor și ”media” ce reprezintă media aritmetică a numerelor. Inițial aceste două variabile vor avea valoarea 0. Apoi verificâm dacă nu cumva array-ul e gol (adica are 0 elemente, adică lungime 0). Dacă are lungime 0 ar trebui să returnăm mesajul ”Atenție, array-ul pe care l-ai introdus e gol”. Trebuie să facem asta deoarece altfel, atunci când am calcula media am împărți la 0, lucru interzis. Dacă nu trebuie să luăm fiecare element din array în parte (cu un for) și să-l adunăm la sumă (suma+=numerele[i])(+= înseamnă adaugă la ce există deja, anamlog -=, *=, /= înseamnă scade, înmulțește și respectiv împarte. În cazul nostru valoarea variabilei suma va crește cu valoarea variabilei numerele[i]).",
				"p4":"După ce calculăm suma numerelor, adică după acel for, mai trebuie doar să calculăm valoarea variabilei ”media”, împărțind suma la câte numere sunt(adică numărul de elemente din array, adică lungimea lui) și să returnăm media.",
				"p5":"Știu că pare mult și complicat, dar avem încredere în tine că te descurci. Nu uita că suntem aici să te ajutăm. Mai jos ai un exemplu de program asemănător, care calculează maximul dintr-un array de numere.",
				"p6":"<div class='codeSnipped'><b>function calculeazaMaximul (numerele){<br>&#160 &#160 &#160 if(numerele.length==0){<br>&#160 &#160 &#160 &#160 &#160 &#160 return \"Sry, array-ul e gol\"<br> &#160 &#160 &#160 }</b> <br> <i>&#160 &#160 &#160 //Daca array-ul are 0 elemente (adica daca nu are elemente) atunci nu poate exista un maxim. In consecinta returnam un mesaj de care sa anunte utilizatorul ce s-a intamplat. Daca functia intra in if-ul acesta ea va intalni cuvantul return, deci se va opri</i><br><br><i>&#160 &#160 &#160 //Daca functia nu intra in if ea nu va intalni cuvantul return, deci va executa codul de mai jos</i><br><br><b>&#160 &#160 &#160 var max=numerele[0];</b><i>//presupunem ca primul numar e cel mai mare. Trebuie sa pornim de undeva</i><br>&#160 &#160 &#160 <b>for(var i=0; i<=numerele.length-1; i++){<br>&#160 &#160 &#160 &#160 &#160 &#160 var elementul_actual=numerele[i]</b><i>//folosim variabila auxiliara elementul_actual. Daca doresti o poti omite, dar noi reccomandam in acest caz scrierea asta deoarece este mai usor de citit</i><br>&#160 &#160 &#160 &#160 &#160 &#160 <b>if(max < elementul_actual){<br>&#160 &#160 &#160 &#160 &#160 &#160 &#160 &#160 &#160 max=elementul_actual</b><i>//daca elementul actual e mai mare decat cel despre care presupunem ca e cel mai mare, atunci presupunem despre acesta ca e cel mai mare, facem asta pentru toate numerele si ne-am convins ca nu exista altul mai mare </i><b><br>&#160 &#160 &#160 &#160 &#160 &#160 }<br>&#160 &#160 &#160 }<br>&#160 &#160 &#160 return max;</b><i> // returnam elementul cel mai mare<br></i><b>}<br><br>scrie(calculeazaMaximul([2,5,4]))</b><i>//va scrie numarul \"5\" in consola</div>"
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonFunctionThree(htmlDocData)",
			"Instructions": {
				"i1":"Scrie functia din enunt. Numește-o tot \"medieAritmetica\"",
				"i2":"Nu uita să verifici dacă array-ul este sau nu gol, și să returnezi mesajul \"Atenție, array-ul pe care l-ai introdus e gol\", în caz că este",
				"i3":"Invocă de trei ori funcția \"medieAritmetica\" și scrie-i rezultatul în consolă (ca lecția trecută)"
			},
			"Next Lesson":"javascript_basic:Variabile locale si globale"
		},
		"javascript_basic:Variabile locale si globale": {
			"Title": "Variabile locale si globale",
			"Text": {
				"p1":"În JavaScript există conceptul de variabile locale și globale, precum și de domeniul unie variabile. Acestea sunt concepte foarte importante care dacă sunt ignorte, deși nu vor crea probleme pe termen scurt, pot distruge proiecte mai mari pe termen lung.",
				"p2":"Ce înseamnă așadar domeniul unei variabile? Pe scurt domeniul unei variabile reprezintă locurile din care ea poate fi accesată. Ca regulă de bază o variabilă poate fi accesată doar în interiorul parantezelor acolde între care a fost definită. Dacă ea a fost definită în afara oricăror paranteze acolade, atunci acea variabilă se numește variabilă globală, și poate fi accesată de oriunde, în caz contrar ea se numește variabilă locală.",
				"p3":"Mai jos ai niște exemple:",
				"p4":"<div class='codeSnipped'><b>var a=5;</b><i>//o variabila globala</i><br><br><b>function test(){<br>&#160 &#160 &#160 var b=6 </b><i>// o variabila locala a functiei test. Ea poate fi invocata doar din interiorul functiei test()</i><br><b>&#160 &#160 &#160 scrie(a) </b><i>//va functiona deoarece a este o var globala</i><br><b>&#160 &#160 &#160 if(true){<br>&#160 &#160 &#160 &#160 &#160 &#160 var c=7 </b><i>//o variabila locala a acestui if. Aceasta variabila poate fi invocata doar in interiorul if-ului</i><br><b>&#160 &#160 &#160 &#160 &#160 &#160 scrie(b)</b><i>//va functiona deoarece acest scrie() este in interiorul functiei test</i><br><b>&#160 &#160 &#160 }</b><br><b>&#160 &#160 &#160 scrie(c)</b><i>//nu va functiona deoarece acest scrie() este in afara if-ului</i><br><b>}</b><br><br><b>scrie(a)</b></b><i>// va functiona deoarece a este o variabila globală</i><br><b>scrie(b)</b><i>//nu va functiona deoarece aici incercam sa invocam variabila b din afara functiei test() in cadrul careia a fost declarata</i></div>",
				"p5":"Notă: Paramteri unei funcții sunt mereu variabile locale, ce pot fi accesate doar din interiorul funcției"
			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"Pass(htmlDocData)",
			"Instructions": {
				"i1":"Cu asta am terminat lecțiile legate de funcții. Urmează să trecem la obiecte. Dacă dorești, ți-am pregătit niște teme, ca să mai exersezi lucrul cu funcții, if-uri, for-uri, while-uri, etc. Aceste teme sunt și o oportunitate să strângi niște puncte în plus",
				"i2":"Dacă dorești să mai exersezi apasă [aici], dacă dorești să continui cursurile apasă pe butonul execută"
			},
			"Next Lesson":"javascript_basic:Obiecte"
		},
		"javascript_basic:Obiecte": {
			"Title": "Obiecte",
			"Text": {
				"p1":"Ok, începem ultimul capitol din cursul introductiv de JavaScript. Unul dintre principile esențiale ale programării este abstractizarea, adică abilittea de a transpune concepte din realitate în cod.",
				"p2":"Pentru a face asta, o unealtă importantă sunt obiectele. Obiectele din JS, și orice alt limbaj de programare, nu sunt nimic mai mult decât reprezentări în cod ale obiectelor din realitate. Să ne imaginăm spre exemplu un portofel. Mai jos am creat un obiect ce să reprezinte acest portofel.",
				"p3":"<div class='codeSnipped'><b>var portofel ={</b><i>//pentru a marca începutul unui obiect deschidem paranteze acolade</i><br><br>&#160 &#160 &#160 <b>material:\"piele\", </b><i>//proprietate</i><br><br>&#160 &#160 &#160 <b>culoare:\"maro\", </b><i>//proprietate</i><br><br>&#160 &#160 &#160 <b>sumaContinuta:500</b><i>//proprietate</i><br><br><br><b>}</b><i>//aici se termină obiectul și începe restul codului</i><br><br><b>scrie(portofel.sumaContinuta)<br>scrie(portofel[\"sumaContinuta\"])</b></div>",
				"p4":"Ok, hai să disecăm un pic cod-ul de mai sus.",
				"p5":"<ol><li>Am declart o variabilă portofel, care să stocheze obiectul nostru</li><li>Am deschis un set de paranteze acolade. În JS obiectele se scriu mereu între paranteze acolade</li><li>Am atribuit obiectului nostru (portofelului) trei proprietăți: material, culoare și sumaConținută și am atribuit fiecărei proprietăți câte o valoare. O proprietate o obiectului este un ceva care-l descrie.</li><li>Cu asta am terminat de creat obiectul nostru și putem începe să-l folosim</li><li>Pentru a acesa o proprietate a unui obiect există două metode, cea cu punct (obiectul.proprietatea, ex. portofel.culoare) sau cea asemănătoare cu array-ul (obiectul[“proprietatea”], ex. portofel[“culoare”]). Metoda cu punct este de de departe cea ai populară (e mai puțin de scris și nu riști să uiți de paranteze sau ghilimele)</li></ol>",
				"p6":"Cam așa se construiește și utilizează un obiect în JavaScript. Remarcă faptul că între proprietăți și valorile lor se trece ”:” nu ”=” și că între proprietățiile individuale ale unui obiect se trece ”,” (obligatoriu)",
				"p7":"<b>Notă</b>: Valorile proprietățiilor obiectelor pot fi orice, string-uri, numere, bool-uri, array-uri sau chiar alte obiecte",
				"p8":"<b>Notă</b>: În unele limbaje de programare un obiect alcătuit doar din prprietăți, adică fără nicio metodă(vom vorbi despre acestea în lecția următoare), se numește struct (structură). În JS, în general, nu se fac asemenea distincții"

			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonObject(htmlDocData)",
			"Instructions": {
				"i1":"Crează o variabilă numită mașina_mea și atribuie-i ca valoare un obiect",
				"i2":"Atribuie-i acestui obiect minim patru proprietăți: marca, model, pret, anulFabricarii",
				"i3":"Scrie valoarea proprietății ”anulFabricarii” al obiectului tău în consolă",
				"i4":"Dacă dorești poți să-i atribui și alte proprietăți"
			},
			"Next Lesson":"javascript_basic:Metode"
		},
		"javascript_basic:Metode": {
			"Title": "Metode",
			"Text": {
				"p1":"Ok, avem un prototip de portofel și unul de mașină, dar niciunul dintre aceste obiecte nu știe să facă mai nimic. De exemplu ne-ar prinde bine o metodă de a adăuga și de a scoate bani din portofel. Pentru asta fosim chiar niște chestii numite metode (echivalentu funcțiilor pentru obiecte). Mai jos ai exemplul:",
				"p2":"<div class='codeSnipped'><b>var portofel ={<br>&#160 &#160 &#160 material:\"piele\",<br>&#160 &#160 &#160 culoare:\"maro\",<br>&#160 &#160 &#160 sumaContinuta:500,<br><br>&#160 &#160 &#160 adaugaBani:function(suma){<br>&#160 &#160 &#160 &#160 &#160 &#160 this.sumaContinuta+=suma<br>&#160 &#160 &#160 },<br><br>&#160 &#160 &#160 scoateBani:function(suma){<br>&#160 &#160 &#160 &#160 &#160 &#160 this.sumaContinuta-=suma<br>&#160 &#160 &#160 }<br><br>}<br>portofel.scoateBani(200)</b><i>//aici scoatem bani din portofel (adică invocăm metoda respectivă)</i><br><b>scrie(portofel.sumaContinuta)</b><i>//deoarece am scos 200 de lei au mai rămas 300, sumă pe care calculatorul o va și afișa.</i></div>",
				"p3":"Așadar, după cum poți vedea acum putem și să interacționăm cu portofelul nostru, respectiv să bagăm și să scoatem bani în/din el.",
				"p4":"Hai să vedem mai exact ce am făcut: Am declarat o metodă numită ”adaugăBani()” ce acceptă un parametru, numit suma, ce reprezintă suma de bani pe care dorim să o adăugăm. Așadar am scris ”adaugăBani:function(suma)”, spunând astfel calculartorului ”adaugăBani()” este o metodă (o funcție a unui obiect) și admite un parametru.",
				"p5":"Apoi între acolade am scris instrucțiuniile exacte ale acestei metode, this.sumaContinuta+=suma, adică la sumaConținută adaugă suma, parametrul nostru.",
				"p6":"Apare însă cuvântul ”this”-acesta-, un alt cuvânt cheie în JS. Acest cuvânt spune JS-ului că este vorba despre acest obiect. Dacă acel cuvânt apare în declarația obiectului portofel, atunci ”this” spune JS-ului că e vorba despre acest obiect, adică despre portofel. Este necesar să specificăm JS-ului despre ce obiect vorbim deoaece proprietățiile, spre deosebire de variabile, pot fi accesate doar în contextul unui obiect.",
				"p7":"Adică nu putem spune JS-ului doar ”sumaContinuta+=suma”, ci trebuie să specificăm și faptul că aici ”suma” se referă la o proprietate a unui obiect, nu la o variabilă. Cuvântul ”this”, în acest caz spune calculatorului că obiectul de care este legată proprietatea ”suma” este acesta( adică cel în interiorul căruia ne aflăm)",
				"p8":"<b>Important</b>: Nu uita să treci virgule după metodele unui obiect, else se trec doar după proprietățile sale"

			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonMethod(htmlDocData)",
			"Instructions": {
				"i1":"Crează o variabilă numită ”om” și salvează în interiorul ei un obiect",
				"i2":"Atribuie abiectului următoarele proprietăți: nume, prenume, varsta, inalțime, masa",
				"i3":"Atribuie obiectului tău două metode, una numită ”saluta()” care să afișeze mesajul ”salut” în consolă, și alta ”descriete()” care să afișeze textul “Mă cheamă” +prenume+ “ ”+ nume +“ ”+ “și am ”+ varsta+ “ani!”",
				"i4":"Invocă cele două funcții"
			},
			"Next Lesson":"javascript_basic:Clase si Constructori"
		},
		"javascript_basic:Clase si Constructori": {
			"Title": "Clase și constructori",
			"Text": {
				"p1":"Wow, exercițiul ăla chiar a f`ost greu. Felicitări! Hai să vorbim și despre altceva. Să spunem de exemplu că am trei câini și vreau să scriu un program cu ajutorul căruia să-i gestionez. Mai jos poți vedea codul pe care l-am scris:",
				"p2":"<div class='codeSnipped'>var rex={<br>&#160 &#160 &#160 nume: \"Rex\",<br>&#160 &#160 &#160 rasa: \"Golden Retriever\",<br>&#160 &#160 &#160 varsta: 6,<br>&#160 &#160 &#160 sex: \"M\", <br>&#160 &#160 &#160 latra: function(){<br>&#160 &#160 &#160 &#160 &#160 &#160 return \"Ham\"<br>&#160 &#160 &#160 }<br>&#160 &#160 &#160 saluta:function(){<br>&#160 &#160 &#160 &#160 &#160 &#160 return \"Salut ma cheama \"+ this.nume<br>&#160 &#160 &#160 }<br>}<br><br>var ursulica={<br>&#160 &#160 &#160 numele: \"Ursulica\",<br>&#160 &#160 &#160 rasa: \"Akita\",<br>&#160 &#160 &#160 varsta: 4,<br>&#160 &#160 &#160 sex: \"M\", <br>&#160 &#160 &#160 latra: function(){<br>&#160 &#160 &#160 &#160 &#160 &#160 return \"Ham\"<br>&#160 &#160 &#160 }<br>&#160 &#160 &#160 saluta:function(){<br>&#160 &#160 &#160 &#160 &#160 &#160 return \"Salut ma cheama \"+ this.nume<br>&#160 &#160 &#160 }<br>}<br><br>var nina={<br>&#160 &#160 &#160 nume: \"Nina\",<br>&#160 &#160 &#160 rasa: \"Ogar Afgan\",<br>&#160 &#160 &#160 varsta: 8,<br>&#160 &#160 &#160 sex: \"F\", <br>&#160 &#160 &#160 latra: function(){<br>&#160 &#160 &#160 &#160 &#160 &#160 return \"Ham\"<br>&#160 &#160 &#160 }<br>&#160 &#160 &#160 saluta:function(){<br>&#160 &#160 &#160 &#160 &#160 &#160 return \"Salut ma cheama \"+ this.nume<br>&#160 &#160 &#160 }<br>}<br><br>var cainiiMei=[rex, ursulica, nina]<br>for(var i=0; i<cainiiMei.length; i++){<br>&#160 &#160 &#160 scrie(cainiiMei[i].nume)<br>}/div>",
				"p3":"Trei probleme cu codul de mai sus. În primul rând e enervant să tot trebuiască să scri acelaș lucru. Doi, încalcă unul din principiile fundamentale ale programării și anume DRY (Don't repeat yourself -nu te repeat-). Și trei, iar asta chiar e urâtă, dacă ești atent poți vedea o greșeală în cod. Al doile câine nu are proprietatea ”nume”, ci proprietatea ”numele”. Așadar for-ul meu nu va printa numele acelui, deoarece nu va găsi proprietatea ”nume”. Poate că-ți pare că e o greșeală pe care tu nu ai putea comite-o, dar așteaptă până lucrezi cu alți 60 de oameni la un proiect și vei vedea cât de ușor poate apărea o situație de genul.",
				"p4":"Așadar, cum putem evita asemenea situații? Răspunsul este dat de clase și constructori. Clasele sunt ca niște planuri de construcție ale obiectului, iar constructorul este o funcție care construiește acel obiect conform planului respectiv. Înainte să intri de tot în ceață iată un exemlu:",
				"p5":"<div class='codeSnipped'>class Caine{<br>&#160 &#160 &#160 constructor(nume, rasa, varsta, sex){<br>&#160 &#160 &#160 &#160 &#160 &#160 this.nume=nume<br>&#160 &#160 &#160 &#160 &#160 &#160 this.rasa=rasa<br>&#160 &#160 &#160 &#160 &#160 &#160 this.varsta=varsta<br>&#160 &#160 &#160 &#160 &#160 &#160 this.sex=sex<br>&#160 &#160 &#160 }<br><br>&#160 &#160 &#160 latra(){<br>&#160 &#160 &#160 &#160 &#160 &#160 return \"Ham\"<br>&#160 &#160 &#160 }<br>&#160 &#160 &#160 saluta(){<br>&#160 &#160 &#160 &#160 &#160 &#160 return \"Salut ma cheama \"+ this.nume<br>&#160 &#160 &#160 }<br>}<br><br>var rex= new Caine(\"Rex\", \"Golden Retriever\", \"M\", 6)<br>var ursulica= new Caine(\"Ursulică\", \"Akita\", \"M\", 4)<br>var nina= new Caine(\"Nina\", \"Ogar Afgan\", \"F\", 8)<br><br>var cainiiMei=[rex, ursulica, nina]<br>for(var i=0; i<cainiiMei.length; i++){<br>&#160 &#160 &#160 scrie(cainiiMei[i].nume);<br>}</div>",
				"p6":"Ok, probabil te întrebi ce se întâmplă acolo sus. Hai să vedem. ”Class Caine” definește o nouă clasă. O clasă este, după cum am spus deja un fel de plan al unui obiect. Urmează funcția constructor, cea care ne construiește funcția. Ea arată în felul următor: Îi scriem drept parametri proprietățiile pe care dorim să le atribuim obiectului când îl creem. Apoi scriem în interiorul funcției constructor ”this.proprietatea=parametrul”, de exemplu ”this.nume=nume”. Astfel obiectul nostru capătă proprietatea nume ce are ca valoare parametrul nume al funcției constructor. După funcția constructor urmează metodele obiectului, scrise ca-n exemplu. Și gata e class pentru obiectul nostru Câine.",
				"p7":"Bine, acum că avem clasa pentru obiectul câine, cum creem acest obiect? Pentru asta folosim cuvântul cheie ”new”-nou-. Acesta spune JS-ului să creeze un obiect nou. De exemplu ”var rex= new Caine(“Rex”, “Golden Retriever”, “M”, 6)” spune calculatorului să atribuie variabilei ”rex” un obiect nou creat(nou construit) al clasei ”caine”. După numele clasei se pun paranteze rotunde, iar între ele se scriu valorile pentru parametri funcției constructor. Primul parametru al funcției constructor este ”nume”, iar prametrului ”nume” îi corespunde ”this.nume” așadar prima valoare dintre parantezele rotunde va reprezenta valoarea proprietății ”nume” a obiectului.",
				"p8":"<b>Important</b>: Cuvântul scris în interiorul funcției constructor dupa ”this” e numele proprietății obiectului, nu cuvântul din parantezele rotunde ale funcției constructor(parametrul ei). De obiecei se folosește acelaș cuvîânt pentru ambele, dar nu e obligatoriu.",
				"p9":"<b>Notă</b>:Un obiecte creat pe baza unei clse se numește instanță a acelei clase. Adică rex este o instanță a clasei câine, adică un câine. Se mai folosește formularea ”Rex e un obiect de tip câine”",
				"p10":"<b>Notă</b>:În JS un obiect poate fi creat și sub forma unei funcții în loc de o clasă. Nu vom intra în detalii, dar e posibil și e o abordare întâlnită relativ des. Noi recomandăm această scriere deoarece este mai clară și seamănă mai mult cu alte limbaje de programare, cea ce face trecerea de la unul la altul mai ușoară. În cursurile mai avansate vom vorbi în mai multe amănunte despre chestiile astea."

			},
			"HTML": "JsAux",
			"Hint":"Example Hint",
			"JS":"",
			"Validator":"CheckLessonCalssesAndConstructors(htmlDocData)",
			"Instructions": {
				"i1":"Crează o clasă numită ”carte”",
				"i2":"Scrie funcția constructor acestei clase. Ea trebuie să includă următoarele proprietăți: ”titlu”, ”autoru”, ”editura”, ”anulAparitiei”, ”pret”, ”timpDeLivrare”. Valoarea variabilei “timpDeLivrare” trebuie să fie un număr și să reprezinte numărul de zile până la livrarea cărții.",
				"i3":"Atribuie clasei o metodă ”cumpara()”, care să printeze următorul text: “Mulțumim că ați cumpărat”+ titlu+ “a lui”+ autor +“Comanda dumveavoastră va ajunge în ” + timpDeLivrare +“ zile”"
			},
			"Next Lesson":"javascript_basic:Tipuri de date"
		}
	}
}
